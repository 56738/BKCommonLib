package net.minecraft.server;

import org.bukkit.craftbukkit.entity.CraftEntity;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key;
import com.bergerkiller.bukkit.common.bases.IntVector3;
import com.bergerkiller.bukkit.common.wrappers.BlockData;

import com.bergerkiller.generated.net.minecraft.server.SoundEffectHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.AxisAlignedBBHandle;
import com.bergerkiller.generated.net.minecraft.server.CrashReportSystemDetailsHandle;

class Entity {
    protected (org.bukkit.entity.Entity) CraftEntity bukkitEntity;
    private static int entityCount;
    public final (List<EntityHandle>) List<Entity> passengers;
    protected unknown int j;
    private (EntityHandle) net.minecraft.server.Entity vehicle:au
    public boolean ignoreChunkCheck:attachedToPlayer;
    public (WorldHandle) World world;
    public double lastX;
    public double lastY;
    public double lastZ;
    public double locX;
    public double locY;
    public double locZ;
    public double motX;
    public double motY;
    public double motZ;
    public float yaw;
    public float pitch;
    public float lastYaw;
    public float lastPitch;
    private (AxisAlignedBBHandle) AxisAlignedBB boundingBoxField:boundingBox;
    public boolean onGround;
    public boolean horizontalMovementImpaired:positionChanged;
    public boolean verticalMovementImpaired:B;
    public boolean movementImpaired:C;
    public boolean velocityChanged;
    protected boolean justLanded:E;
    private unknown boolean aw;
    public boolean dead;
    public float width;
    public float length;
    public unknown float I;
    public float walkedDistanceXZ:J;
    public float walkedDistanceXYZ:K;
    public float fallDistance;
    private int stepCounter:ax;
    public unknown double M;
    public unknown double N;
    public unknown double O;
    public float heightOffset:P;
    public boolean noclip;
    public unknown float R;
    protected Random random;
    public int ticksLived;
    public int fireTicks;
    protected (com.bergerkiller.bukkit.common.wrappers.DataWatcher) net.minecraft.server.DataWatcher datawatcherField:datawatcher;

    protected static final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_FLAGS:Z;
    private static final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_AIR_TICKS:az;
    private static final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_CUSTOM_NAME:aA;
    private static final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_CUSTOM_NAME_VISIBLE:aB;
    private static final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_SILENT:aC;
    private static final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_NO_GRAVITY:aD;

    public boolean isLoaded:aa;
    public int chunkX:ab;
    public int chunkY:ac;
    public int chunkZ:ad;

    public unknown boolean ah;

    public boolean positionChanged:impulse;
    public int portalCooldown;
    protected boolean allowTeleportation:ak;

    protected unknown int al;

    public int dimension;

    private double[] move_SomeArray:aI;
    private long move_SomeState:aJ;
    public boolean valid;

    /*
     * protected void ##METHODNAME##(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
     *     if (flag) {
     *         if (this.fallDistance > 0.0F) {
     *             iblockdata.getBlock().fallOn(this.world, blockposition, this, this.fallDistance);
     *         }
     *         ...
     *     }
     *     ...
     * }
     */
    protected void updateFalling:a(double d0, boolean flag, (BlockData) IBlockData blockData, (IntVector3) BlockPosition position);

    /*
     # protected void ##METHODNAME##() {
     *     AxisAlignedBB axisalignedbb = this.getBoundingBox();
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.d(axisalignedbb.a + 0.001D, axisalignedbb.b + 0.001D, axisalignedbb.c + 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition1 = BlockPosition.PooledBlockPosition.d(axisalignedbb.d - 0.001D, axisalignedbb.e - 0.001D, axisalignedbb.f - 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition2 = BlockPosition.PooledBlockPosition.s();
     *     ...
     * }
     */
    protected void updateBlockCollision:checkBlockCollisions();

    /*
     # protected void ##METHODNAME##(BlockPosition blockposition, Block block) {
     *     SoundEffectType soundeffecttype = block.getStepSound();
     *     if (this.world.getType(blockposition.up()).getBlock() == Blocks.SNOW_LAYER) {
     *         soundeffecttype = Blocks.SNOW_LAYER.getStepSound();
     *         this.a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     } else if (!block.getBlockData().getMaterial().isLiquid()) {
     *         this.a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     }
     * }
     */
    protected void playStepSound:a((IntVector3) BlockPosition position, (BlockData) Block blockData);

    /*
     # protected void ##METHODNAME##(float f, float f1) {
     *     // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
     *     if (Float.isNaN(f)) {
     *         f = 0;
     *     }
     *     if (f == Float.POSITIVE_INFINITY || f == Float.NEGATIVE_INFINITY) {
     *         if (this instanceof EntityPlayer) {
     *             this.world.getServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid yaw");
     *             ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)"); //Spigot "Nope" -> Descriptive reason
     *         }
     *         f = 0;
     *     }
     *     ...
     * }
     */
    protected void setRotation:setYawPitch(float yaw, float pitch);

    /*
     # protected void ##METHODNAME##(float i) { // CraftBukkit - int -> float
     *     if (!this.fireProof) {
     *         this.damageEntity(DamageSource.FIRE, (float) i);
     *     }
     * }
     */
    protected void burn(float dmg);

    public (org.bukkit.entity.Item) EntityItem dropItem:a((org.bukkit.Material) Item material, int amount, float force);

    public (org.bukkit.entity.Item) EntityItem dropItemStack:a((org.bukkit.inventory.ItemStack) ItemStack itemstack, float force);

    /*
     * void move(...) {
     *     ...
     #     this.a(this.##METHODNAME##(), f1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
     * }
     */
    protected (SoundEffectHandle) SoundEffect getSwimSound:aa();

    /*
     * void move(...) {
     *     ...
     *     this.##METHODNAME##(this.aa(), f1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
     * }
     * 
     # public void ##METHODNAME##(SoundEffect soundeffect, float f, float f1) {
     *     if (!this.isSilent()) {
     *         this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffect, this.bC(), f, f1);
     *     }
     * }
     */
    public void makeSound:a((SoundEffectHandle) SoundEffect soundeffect, float volume, float pitch);

    /*
     # public boolean ###METHODNAME###() {
     *     if (this.world.a(this.boundingBox.grow(0.0D, -0.4000000059604645D, 0.0D).shrink(0.001D, 0.001D, 0.001D), Material.WATER, this)) {
     *         if (!this.inWater && !this.justCreated) {
     *             ...
     *         }
     *     }
     * }
     */
    public boolean isInWaterUpdate:ak();

    /*
     # public boolean ###METHODNAME###() {
     *     return this.inWater;
     * }
     */
    public boolean isInWater();

    /*
     * public void move(double d0, double d1, double d2) {
     *     ....
     *     {
     *         if (bl.getType() != org.bukkit.Material.AIR) {
     *             VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
     *             world.getServer().getPluginManager().callEvent(event);
     *         }
     *     }
     *     
     *     // CraftBukkit end
     *
     #     if (this.###METHODNAME###() && (!this.onGround || !this.isSneaking() || !(this instanceof EntityHuman)) && !this.isPassenger()) {
     *         double d22 = this.locX - d4;
     *         double d23 = this.locY - d5;
     *         ...
     *     }
     * }
     */
    protected boolean hasMovementSound:playStepSound();

    /*
     # protected void ##METHODNAME##(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
     *     if (flag) {
     *         if (this.fallDistance > 0.0F) {
     *             iblockdata.getBlock().fallOn(this.world, blockposition, this, this.fallDistance);
     *         }
     *
     *         this.fallDistance = 0.0F;
     *     } else if (d0 < 0.0D) {
     *         this.fallDistance = ((float)(this.fallDistance - d0));
     *     }
     * }
     */
    protected void doFallUpdate:a(double d0, boolean flag, (BlockData) IBlockData blockData, (IntVector3) BlockPosition blockposition);

    /*
     * protected void ##METHODNAME##(BlockPosition blockposition, Block block) {
     *     SoundEffectType soundeffecttype = block.getStepSound();
     *
     *     if (this.world.getType(blockposition.up()).getBlock() == Blocks.SNOW_LAYER) {
     *         soundeffecttype = Blocks.SNOW_LAYER.getStepSound();
     *         a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     } else if (!block.getBlockData().getMaterial().isLiquid()) {
     *         a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     }
     * }
     */
    protected void doStepSoundUpdate:a((IntVector3) BlockPosition blockposition, (BlockData) Block blockData);

    /*
     * protected void checkBlockCollisions() {
     *     AxisAlignedBB axisalignedbb = getBoundingBox();
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.d(axisalignedbb.a + 0.001D, axisalignedbb.b + 0.001D, axisalignedbb.c + 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition1 = BlockPosition.PooledBlockPosition.d(axisalignedbb.d - 0.001D, axisalignedbb.e - 0.001D, axisalignedbb.f - 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition2 = BlockPosition.PooledBlockPosition.s();
     *     ...
     * }
     */
    protected void checkBlockCollisions();

    /*
     * public double ##METHODNAME##(double d0, double d1, double d2) {
     *     double d3 = this.locX - d0;
     *     double d4 = this.locY - d1;
     *     double d5 = this.locZ - d2;
     *
     *     return MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
     * }
     */
    public double calculateDistance:e(double x, double y, double z);

    public void setPosition(double x, double y, double z);

    public void setPositionRotation(double x, double y, double z, float yaw, float pitch);

    public void setLocation(double x, double y, double z, float yaw, float pitch);

    public float getHeadRotation();

    public (AxisAlignedBBHandle) AxisAlignedBB getBoundingBox();

    public void setBoundingBox:a((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb)

    public (AxisAlignedBBHandle) AxisAlignedBB getOtherBoundingBox:ag();

    public (AxisAlignedBBHandle) AxisAlignedBB getEntityBoundingBox:j((EntityHandle) Entity entity);

    public void recalcPosition();

    public boolean isBurning();

    public boolean isPassenger();

    public boolean isVehicle();

    public void setOnFire(int numSeconds);

    public int getMaxFireTicks();

    public boolean isWet:ai();

    public (EntityHandle) Entity getDriverEntity:bw();

    public boolean isSneaking();

    public boolean isInSameVehicle:x((EntityHandle) Entity entity);

    public void appendEntityCrashDetails((CrashReportSystemDetailsHandle) CrashReportSystemDetails crashreportsystemdetails);

    public int getId();

    public UUID getUniqueID();

    public (com.bergerkiller.bukkit.common.wrappers.DataWatcher) net.minecraft.server.DataWatcher getDataWatcher();

    <code>
    public org.bukkit.entity.Entity toEntity() {
        return com.bergerkiller.bukkit.common.conversion.Conversion.toEntity.convert(instance);
    }

    public static EntityHandle createBukkit(org.bukkit.entity.Entity entity) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toEntityHandle.convert(entity));
    }
    </code>
}
