package net.minecraft.server;

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.bases.IntVector3;

import com.bergerkiller.generated.net.minecraft.server.AxisAlignedBBHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldDataHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldTypeHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.MethodProfilerHandle;
import com.bergerkiller.generated.net.minecraft.server.BiomeBaseHandle.BiomeMetaHandle;

class World {
    /* protected final (IntHashMap<EntityHandle>) IntHashMap<Entity> entitiesById; */

    public final (List<EntityHandle>) List<Entity> entityList;

    public (org.bukkit.World) org.bukkit.craftbukkit.CraftWorld getWorld();

    public (BlockData) IBlockData getBlockData:getType((IntVector3) BlockPosition blockposition);

    public long getTime();

    public final (MethodProfilerHandle) MethodProfiler methodProfiler;

    private boolean getBlockCollisions:a((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB bounds, boolean flag, (List<AxisAlignedBBHandle>) List<AxisAlignedBB> list);

    public (List<AxisAlignedBBHandle>) List<AxisAlignedBB> getCubes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);

    public (List<EntityHandle>) List<Entity> getEntities((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);

    public (WorldDataHandle) WorldData getWorldData();

    public boolean isBurnArea:e((AxisAlignedBBHandle) AxisAlignedBB bounds);

    public void removeEntity((EntityHandle) Entity entity);

    public boolean addEntity((EntityHandle) Entity entity);

    <code>
    public org.bukkit.World toBukkit() {
        return com.bergerkiller.bukkit.common.conversion.Conversion.toWorld.convert(instance);
    }

    public static WorldHandle fromBukkit(org.bukkit.World world) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toWorldHandle.convert(world));
    }
    </code>
}

class WorldServer extends World {
    private final (Map<java.util.UUID, EntityHandle>) Map<java.util.UUID, Entity> entitiesByUUID;
}

class WorldData {
    public (WorldTypeHandle) WorldType getType();
}

class WorldType {
    public int getDimension:g();
}

class BiomeBase {

    class BiomeBase.BiomeMeta {
        public (java.lang.Class<?>) java.lang.Class<? extends EntityInsentient> entityClass:b;

        public (BiomeMetaHandle) BiomeBase.BiomeMeta((java.lang.Class<?>) java.lang.Class<? extends EntityInsentient> entityClass, int x, int y, int z);
    }
}
