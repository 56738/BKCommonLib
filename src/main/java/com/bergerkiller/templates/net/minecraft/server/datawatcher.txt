package net.minecraft.server;

import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.DataWatcherHandle;
import com.bergerkiller.generated.net.minecraft.server.DataWatcherHandle.ItemHandle;
import com.bergerkiller.generated.net.minecraft.server.DataWatcherObjectHandle;

class DataWatcher {
    private final (EntityHandle) Entity owner:c

    public (DataWatcherHandle) DataWatcher((EntityHandle) Entity entity);

    /*
     *  } else if (this.d.containsKey(Integer.valueOf(i))) {
     *      throw new IllegalArgumentException("Duplicate id value for " + i + "!");
     #  } else if (DataWatcherRegistry.b(datawatcherobject.##METHODNAME##()) < 0) {
     *      throw new IllegalArgumentException("Unregistered serializer " + datawatcherobject.b() + " for " + i + "!");
     *  } else {
     */
#if version >= 1.10.2
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> unwatchAndReturnAllWatched:b();
#else
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.WatchableObject> unwatchAndReturnAllWatched:b();
#endif

    /*
     * Same signature as unwatchAndReturnAllWatched, find other function that matches
     */
#if version >= 1.10.2
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> returnAllWatched:c();
#else
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.WatchableObject> returnAllWatched:c();
#endif

#if version >= 1.10.2
    private void watch:registerObject((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key, Object defaultValue);

    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<T>) DataWatcher.Item<T> read:c((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key);

    public optional T get((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key);
    public void set((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key, T value);
#else
    public void watch:watch((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) int key, T defaultValue);

    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>) DataWatcher.WatchableObject read:j((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) int key);

    public optional T get:???((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) int key);
    public void set:a((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) int key, T value);
#endif
    <code>
    public Object get(com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?> key) {
        if (T.get.isAvailable()) {
            return T.get.invoke(instance, key);
        } else {
            return this.read(key).getValue();
        }
    }
    </code>

    public boolean isChanged:a();
    public boolean isEmpty:d();

    class DataWatcher.Item {
#if version >= 1.10.2
        private optional final int typeId:???;
        private final (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key:a;
        private T value:b;
        private boolean changed:c;
#else
        private optional final int typeId:a;
        private final (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) int key:b;
        private Object value:c;
        private boolean changed:d;
#endif
    }
}

class DataWatcherObject {
#if version >= 1.10.2
    public int getId:a();
    public optional (Object) DataWatcherSerializer<T> getSerializer:b()
#else
    public int getId();
    public optional (Object) DataWatcherSerializer<T> getSerializer:???()
#endif

    public optional (DataWatcherObjectHandle) DataWatcherObject(int index);
}

optional class DataWatcherRegistry {
    public static int getSerializerId:b((Object) DataWatcherSerializer<?> paramDataWatcherSerializer);
}