package net.minecraft.server;

import com.google.common.collect.ImmutableMap;
import com.google.common.base.Function;

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.bases.IntVector3

import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.BlockHandle;
import com.bergerkiller.generated.net.minecraft.server.IBlockDataHandle;
import com.bergerkiller.generated.net.minecraft.server.ExplosionHandle;
import com.bergerkiller.generated.net.minecraft.server.SoundEffectTypeHandle;

class Block {
    public static final rawtype (Iterable) RegistryBlocks<MinecraftKey, Block> REGISTRY;

#if version >= 1.9
    public static final rawtype (Iterable) RegistryBlockID<IBlockData> REGISTRY_ID;
    public optional (SoundEffectTypeHandle) Block.StepSound opt_1_8_8_soundType:???;
#else
    public static final rawtype (Iterable) RegistryID<IBlockData> REGISTRY_ID:d;
    public optional (SoundEffectTypeHandle) Block.StepSound opt_1_8_8_soundType:stepSound;
#endif

    public void entityHitVertical:a((WorldHandle) World world, (EntityHandle) Entity entity);

#if version >= 1.9
    // On later versions, it has an IBlockData argument
    public int getOpacity:m((IBlockDataHandle) IBlockData iblockdata);
    public int getEmission:o((IBlockDataHandle) IBlockData iblockdata);
    public boolean isOccluding:isOccluding((IBlockDataHandle) IBlockData iblockdata);
    public boolean isPowerSource:isPowerSource((IBlockDataHandle) IBlockData iblockdata);
#else
    // By IBlockData does not exist; proxy to the empty args version
    public int getOpacity((IBlockDataHandle) IBlockData iblockdata) {
        return instance.p();
    }
    public int getEmission((IBlockDataHandle) IBlockData iblockdata) {
        return instance.r();
    }
    public boolean isOccluding((IBlockDataHandle) IBlockData iblockdata) {
        return instance.isOccluding();
    }
    public boolean isPowerSource((IBlockDataHandle) IBlockData iblockdata) {
        return instance.isPowerSource();
    }
#endif

    public float getDamageResillience:a((org.bukkit.entity.Entity) Entity entity);

#if version >= 1.11
    public optional (SoundEffectTypeHandle) SoundEffectType getSoundType:getStepSound();
#elseif version >= 1.9
    public optional (SoundEffectTypeHandle) SoundEffectType getSoundType:w();
#else
    public optional (SoundEffectTypeHandle) SoundEffectType getSoundType:???();
#endif
    <code>
    public SoundEffectTypeHandle getSoundType() {
        if (T.getSoundType.isAvailable()) {
            return T.getSoundType.invoke(getRaw());
        } else {
            return T.opt_1_8_8_soundType.get(getRaw());
        }
    }
    </code>

    public void dropNaturally((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (IBlockDataHandle) IBlockData iblockdata, float yield, int chance);
    public void ignite:wasExploded((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (ExplosionHandle) Explosion explosion);

#if version >= 1.9
    public void stepOn((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (org.bukkit.entity.Entity) Entity entity);
#else
    public void stepOn:a((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (org.bukkit.entity.Entity) Entity entity);
#endif

    public (IBlockDataHandle) IBlockData updateState((IBlockDataHandle) IBlockData iblockdata, (Object) IBlockAccess iblockaccess, (IntVector3) BlockPosition blockposition);

    public final (IBlockDataHandle) IBlockData getBlockData();

    public (IBlockDataHandle) IBlockData fromLegacyData(int data);
    public int toLegacyData((IBlockDataHandle) IBlockData iblockdata);

    public static int getCombinedId((IBlockDataHandle) IBlockData iblockdata);
    public static int getId((BlockHandle) Block block);
    public static (BlockHandle) Block getById(int id);
    public static (IBlockDataHandle) IBlockData getByCombinedId(int combinedId);
}

class Blocks {
    public static final (Object) Block LADDER;
}

interface IBlockData {
    public abstract (BlockHandle) Block getBlock();

#if version >= 1.12
    public abstract (Map<Object, Object>) ImmutableMap<IBlockState<?>, Comparable<?>> getStates:t();
#elseif version >= 1.11
    public abstract (Map<Object, Object>) ImmutableMap<IBlockState<?>, Comparable<?>> getStates:u();
#elseif version >= 1.9
    public abstract (Map<Object, Object>) ImmutableMap<IBlockState<?>, Comparable<?>> getStates:s();
#else
    public abstract (Map<Object, Object>) ImmutableMap<IBlockState, Comparable> getStates:b();
#endif
}

interface IBlockState {
    public abstract String getKeyToken:a();

    public abstract String getValueToken:a(T value);
}