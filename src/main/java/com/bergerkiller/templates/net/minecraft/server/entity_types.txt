package net.minecraft.server;

class EntityTypes {
#if version >= 1.11
    public static optional final (Object) RegistryMaterials<MinecraftKey, Class<? extends Entity>> opt_entityRegistry:b;

    private static optional final (Map<String, Class<?>>) Map<String, Class<? extends Entity>> opt_entityMap:???;

    private static optional void register:a(int entityId, String name1, (Class<?>) Class<? extends Entity> entityClass, String name2);

    private static optional void register_old:???((Class<?>) Class<? extends Entity> oclass, String entityName, int entityId);

    public static optional (Object) MinecraftKey getName((Class<?>) Class<? extends Entity> paramClass);

    public static optional String getName_old:???((Class<?>) Class<? extends Entity> oclass);
#else
    public static optional final (Object) RegistryMaterials<MinecraftKey, Class<? extends Entity>> opt_entityRegistry:???;

    private static optional final (Map<String, Class<?>>) Map<String, Class<? extends Entity>> opt_entityMap:c;

    private static optional void register:???(int entityId, String name1, (Class<?>) Class<? extends Entity> entityClass, String name2);

    private static optional void register_old:a((Class<?>) Class<? extends Entity> oclass, String entityName, int entityId);

    public static optional (Object) MinecraftKey getName:???((Class<?>) Class<? extends Entity> paramClass);
    
    public static optional String getName_old:getName((Class<?>) Class<? extends Entity> oclass);
#endif

#if version <= 1.8.8
    private static optional final (Map<Class<?>, String>) Map<Class<? extends Entity>, String> entityNamesMap_1_8_8:d;
#else
    private static optional final (Map<Class<?>, String>) Map<Class<? extends Entity>, String> entityNamesMap_1_8_8:???;
#endif

    <code>
    /**
     * Gets the Minecraft key associated with an Entity Class Type
     * 
     * @param type of Entity
     * @return Minecraft key
     */
    public static String getName(Class<?> type) {
        if (T.getName.isAvailable()) {
            Object mcKey = T.getName.invoke(type);
            return (mcKey == null) ? null : mcKey.toString();
        } else if (T.getName_old.isAvailable()) {
            return T.getName_old.invoke(type);
        } else if (T.entityNamesMap_1_8_8.isAvailable()) {
            return T.entityNamesMap_1_8_8.get().get(type);
        } else {
            throw new UnsupportedOperationException("Entity Name by Class lookup is not supported on this server");
        }
    }
    </code>
}
