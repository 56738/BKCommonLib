package net.minecraft.server;

import org.bukkit.craftbukkit.entity.CraftEntity;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key;
import com.bergerkiller.bukkit.common.wrappers.ResourceKey;
import com.bergerkiller.bukkit.common.bases.IntVector3;
import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.nbt.CommonTagCompound;

import com.bergerkiller.generated.net.minecraft.server.SoundEffectHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldServerHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.AxisAlignedBBHandle;
import com.bergerkiller.generated.net.minecraft.server.CrashReportSystemDetailsHandle;
import com.bergerkiller.generated.net.minecraft.server.DamageSourceHandle;

class Entity {
    protected (org.bukkit.entity.Entity) CraftEntity bukkitEntityField:bukkitEntity;
    private static int entityCount;
    private int idField:id;

    /* ====== START OF PASSENGER AND VEHICLE LOGIC ====== */
#if version >= 1.10.2
    public optional final (List<EntityHandle>) List<Entity> opt_passengers:passengers;
    public optional (EntityHandle) Entity opt_passenger:???;
    protected unknown int j;
    private (EntityHandle) net.minecraft.server.Entity vehicle:au;
#else
    public optional final (List<EntityHandle>) List<Entity> opt_passengers:???;
    public optional (EntityHandle) Entity opt_passenger;
    private (EntityHandle) net.minecraft.server.Entity vehicle;
#endif

    <code>
    public List<EntityHandle> getPassengers() {
        if (T.opt_passengers.isAvailable()) {
            List<EntityHandle> passengers = T.opt_passengers.get(instance);
            if (passengers == null) {
                return java.util.Collections.emptyList();
            } else {
                return passengers;
            }
        } else {
            EntityHandle passenger = T.opt_passenger.get(instance);
            if (passenger == null) {
                return java.util.Collections.emptyList();
            } else {
                return java.util.Arrays.asList(passenger);
            }
        }
    }

    public boolean hasPassengers() {
        if (T.opt_passengers.isAvailable()) {
            List<EntityHandle> passengers = T.opt_passengers.get(instance);
            return passengers != null && passengers.size() > 0;
        } else {
            return T.opt_passenger.get(instance) != null;
        }
    }

    public void setPassengers(List<EntityHandle> passengers) {
        if (T.opt_passengers.isAvailable()) {
            List<EntityHandle> entity_passengers = T.opt_passengers.get(instance);
            if (entity_passengers == null) {
                T.opt_passengers.set(instance, passengers);
            } else {
                entity_passengers.clear();
                entity_passengers.addAll(passengers);
            }
        } else if (passengers.size() == 0) {
            T.opt_passenger.set(instance, null);
        } else {
            T.opt_passenger.set(instance, passengers.get(0));
        }
    }
    </code>
    /* ====== END OF PASSENGER AND VEHICLE LOGIC ====== */

    public boolean ignoreChunkCheck:attachedToPlayer;
    public (WorldHandle) World world;
    public double lastX;
    public double lastY;
    public double lastZ;
    public double locX;
    public double locY;
    public double locZ;
    public double motX;
    public double motY;
    public double motZ;
    public float yaw;
    public float pitch;
    public float lastYaw;
    public float lastPitch;
    private (AxisAlignedBBHandle) AxisAlignedBB boundingBoxField:boundingBox;
    public boolean onGround;
    public boolean horizontalMovementImpaired:positionChanged;

#if version >= 1.10.2
    public boolean verticalMovementImpaired:B;
    public boolean movementImpaired:C;
    public boolean velocityChanged;
    protected boolean justLanded:E;
    private unknown boolean aw;
#else
    public boolean verticalMovementImpaired:E;
    public boolean movementImpaired:F;
    public boolean velocityChanged;
    protected boolean justLanded:H;
    private unknown boolean g;
#endif

    public boolean dead;
    public float width;
    public float length;

#if version >= 1.10.2
    public unknown float I;
    public float walkedDistanceXZ:J;
    public float walkedDistanceXYZ:K;
#else
    public unknown float L;
    public float walkedDistanceXZ:M;
    public float walkedDistanceXYZ:N;
#endif

    public float fallDistance;

#if version >= 1.10.2
    private int stepCounter:ax;
#else
    private int stepCounter:h;
#endif

#if version >= 1.12
    private unknown float ay;
#endif

#if version >= 1.10.2
    public unknown double M;
    public unknown double N;
    public unknown double O;
    public float heightOffset:P;
    public boolean noclip;
    public unknown float R;
#else
    public unknown double P;
    public unknown double Q;
    public unknown double R;
    public float heightOffset:S;
    public boolean noclip;
    public unknown float U;
#endif

    protected Random random;
    public int ticksLived;
    public optional int field_maxFireTicks:maxFireTicks;
    public int fireTicks;
    protected (com.bergerkiller.bukkit.common.wrappers.DataWatcher) net.minecraft.server.DataWatcher datawatcherField:datawatcher;

#if version >= 1.10.2
    /* === MC 1.10.2 and onwards has constants like these for datawatcher keys === */
    #if version >= 1.11.2
        protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_FLAGS:Z;
    #else
        protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_FLAGS:aa;
    #endif
    #if version >= 1.12
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_AIR_TICKS:aA;
        private static optional final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_CUSTOM_NAME:aB;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_CUSTOM_NAME_VISIBLE:aC;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_SILENT:aD;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_NO_GRAVITY:aE;
    #else
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_AIR_TICKS:az;
        private static optional final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_CUSTOM_NAME:aA;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_CUSTOM_NAME_VISIBLE:aB;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_SILENT:aC;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_NO_GRAVITY:aD;
    #endif
#else
    /* === MC 1.8.8: These constants do not exist == */
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_FLAGS:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_AIR_TICKS:???;
    private static optional final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_CUSTOM_NAME:???;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_CUSTOM_NAME_VISIBLE:???;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_SILENT:???;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_NO_GRAVITY:???;
#endif
    <code>
    public static DataWatcher.Key<Byte> DATA_FLAGS = DataWatcher.Key.fromTemplate(T.DATA_FLAGS, 0, byte.class);
    public static DataWatcher.Key<Integer> DATA_AIR_TICKS = DataWatcher.Key.fromTemplate(T.DATA_AIR_TICKS, 1, short.class);
    public static DataWatcher.Key<String> DATA_CUSTOM_NAME = DataWatcher.Key.fromTemplate(T.DATA_CUSTOM_NAME, 2, String.class);
    public static DataWatcher.Key<Boolean> DATA_CUSTOM_NAME_VISIBLE = DataWatcher.Key.fromTemplate(T.DATA_CUSTOM_NAME_VISIBLE, 3, byte.class);
    public static DataWatcher.Key<Boolean> DATA_SILENT = DataWatcher.Key.fromTemplate(T.DATA_SILENT, 4, byte.class);
    public static DataWatcher.Key<Boolean> DATA_NO_GRAVITY = DataWatcher.Key.fromTemplate(T.DATA_NO_GRAVITY, -1, byte.class);

    public static final int DATA_FLAG_ON_FIRE = (1 << 0);
    public static final int DATA_FLAG_SNEAKING = (1 << 1);
    public static final int DATA_FLAG_UNKNOWN1 = (1 << 2);
    public static final int DATA_FLAG_SPRINTING = (1 << 3);
    public static final int DATA_FLAG_UNKNOWN2 = (1 << 4);
    public static final int DATA_FLAG_INVISIBLE = (1 << 5);
    public static final int DATA_FLAG_GLOWING = (1 << 6);
    public static final int DATA_FLAG_FLYING = (1 << 7);
    </code>

#if version >= 1.11.2
    public boolean isLoaded:aa;
    public int chunkX:ab;
    public int chunkY:ac;
    public int chunkZ:ad;
    public unknown boolean ah;
    public boolean positionChanged:impulse;
#elseif version >= 1.10.2
    public boolean isLoaded:ab;
    public int chunkX:ac;
    public int chunkY:ad;
    public int chunkZ:ae;
    public unknown boolean ai;
    public boolean positionChanged:impulse;
#else
    private unknown double ar;
    private unknown double as;
    public boolean isLoaded:ad;
    public int chunkX:ae;
    public int chunkY:af;
    public int chunkZ:ag;
    public unknown boolean ah;
    public boolean positionChanged:ai;
#endif

    public int portalCooldown;

#if version >= 1.11.2
    protected boolean allowTeleportation:ak;
    protected unknown int al;
#elseif version >= 1.10.2
    protected boolean allowTeleportation:al;
    protected unknown int am;
#else
    protected boolean allowTeleportation:ak;
    protected unknown int al;
#endif

    public int dimension;

#if version >= 1.12
    optional private final double[] move_SomeArray:aJ;
    optional private long move_SomeState:aK;
#elseif version >= 1.11.2
    optional private double[] move_SomeArray:aI;
    optional private long move_SomeState:aJ;
#else
    optional private double[] move_SomeArray:???;
    optional private long move_SomeState:???;
#endif

    public boolean valid;

    public (EntityHandle) Entity((WorldHandle) World world);

    /*
     * protected void ##METHODNAME##(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
     *     if (flag) {
     *         if (this.fallDistance > 0.0F) {
     *             iblockdata.getBlock().fallOn(this.world, blockposition, this, this.fallDistance);
     *         }
     *         ...
     *     }
     *     ...
     * }
     */
    protected void updateFalling:a(double d0, boolean flag, (BlockData) IBlockData blockData, (IntVector3) BlockPosition position);

    /*
     # protected void ##METHODNAME##() {
     *     AxisAlignedBB axisalignedbb = this.getBoundingBox();
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.d(axisalignedbb.a + 0.001D, axisalignedbb.b + 0.001D, axisalignedbb.c + 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition1 = BlockPosition.PooledBlockPosition.d(axisalignedbb.d - 0.001D, axisalignedbb.e - 0.001D, axisalignedbb.f - 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition2 = BlockPosition.PooledBlockPosition.s();
     *     ...
     * }
     */
    protected void updateBlockCollision:checkBlockCollisions();

    /*
     # protected void ##METHODNAME##(BlockPosition blockposition, Block block) {
     *     SoundEffectType soundeffecttype = block.getStepSound();
     *     if (this.world.getType(blockposition.up()).getBlock() == Blocks.SNOW_LAYER) {
     *         soundeffecttype = Blocks.SNOW_LAYER.getStepSound();
     *         this.a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     } else if (!block.getBlockData().getMaterial().isLiquid()) {
     *         this.a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     }
     * }
     */
    protected void playStepSound:a((IntVector3) BlockPosition position, (BlockData) Block blockData);

    /*
     # protected void ##METHODNAME##(float f, float f1) {
     *     // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
     *     if (Float.isNaN(f)) {
     *         f = 0;
     *     }
     *     if (f == Float.POSITIVE_INFINITY || f == Float.NEGATIVE_INFINITY) {
     *         if (this instanceof EntityPlayer) {
     *             this.world.getServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid yaw");
     *             ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)"); //Spigot "Nope" -> Descriptive reason
     *         }
     *         f = 0;
     *     }
     *     ...
     * }
     */
    protected void setRotation:setYawPitch(float yaw, float pitch);

    /*
     # protected void ##METHODNAME##(float i) { // CraftBukkit - int -> float
     *     if (!this.fireProof) {
     *         this.damageEntity(DamageSource.FIRE, (float) i);
     *     }
     * }
     */
    protected void burn(float dmg);

    public (org.bukkit.entity.Item) EntityItem dropItem:a((org.bukkit.Material) Item material, int amount, float force);

    public (org.bukkit.entity.Item) EntityItem dropItemStack:a((org.bukkit.inventory.ItemStack) ItemStack itemstack, float force);

    /*
     * void move(...) {
     *     ...
     #     this.a(this.##METHODNAME##(), f1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
     * }
     */
#if version >= 1.12
    protected (ResourceKey) SoundEffect getSwimSound:ae();
#elseif version >= 1.10.2
    protected (ResourceKey) SoundEffect getSwimSound:aa();
#else
    protected (ResourceKey) String getSwimSound:P();
#endif

    /*
     * void move(...) {
     *     ...
     *     this.##METHODNAME##(this.aa(), f1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
     * }
     * 
     # public void ##METHODNAME##(SoundEffect soundeffect, float f, float f1) {
     *     if (!this.isSilent()) {
     *         this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffect, this.bC(), f, f1);
     *     }
     * }
     */
#if version >= 1.10.2
    public void makeSound:a((ResourceKey) SoundEffect soundeffect, float volume, float pitch);
#else
    public void makeSound:makeSound((ResourceKey) String soundeffect, float volume, float pitch);
#endif

    /*
     # public boolean ###METHODNAME###() {
     *     if (this.world.a(this.boundingBox.grow(0.0D, -0.4000000059604645D, 0.0D).shrink(0.001D, 0.001D, 0.001D), Material.WATER, this)) {
     *         if (!this.inWater && !this.justCreated) {
     *             ...
     *         }
     *     }
     * }
     */
#if version >= 1.12
    public boolean isInWaterUpdate:aq();
#else
    public boolean isInWaterUpdate:ak();
#endif

    /*
     # public boolean ###METHODNAME###() {
     *     return this.inWater;
     * }
     */
    public boolean isInWater();

    /*
     * public void move(double d0, double d1, double d2) {
     *     ....
     *     {
     *         if (bl.getType() != org.bukkit.Material.AIR) {
     *             VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
     *             world.getServer().getPluginManager().callEvent(event);
     *         }
     *     }
     *     
     *     // CraftBukkit end
     *
     #     if (this.###METHODNAME###() && (!this.onGround || !this.isSneaking() || !(this instanceof EntityHuman)) && !this.isPassenger()) {
     *         double d22 = this.locX - d4;
     *         double d23 = this.locY - d5;
     *         ...
     *     }
     * }
     */
    protected boolean hasMovementSound:playStepSound();

    /*
     # protected void ##METHODNAME##(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
     *     if (flag) {
     *         if (this.fallDistance > 0.0F) {
     *             iblockdata.getBlock().fallOn(this.world, blockposition, this, this.fallDistance);
     *         }
     *
     *         this.fallDistance = 0.0F;
     *     } else if (d0 < 0.0D) {
     *         this.fallDistance = ((float)(this.fallDistance - d0));
     *     }
     * }
     */
    protected void doFallUpdate:a(double d0, boolean flag, (BlockData) IBlockData blockData, (IntVector3) BlockPosition blockposition);

    /*
     * protected void ##METHODNAME##(BlockPosition blockposition, Block block) {
     *     SoundEffectType soundeffecttype = block.getStepSound();
     *
     *     if (this.world.getType(blockposition.up()).getBlock() == Blocks.SNOW_LAYER) {
     *         soundeffecttype = Blocks.SNOW_LAYER.getStepSound();
     *         a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     } else if (!block.getBlockData().getMaterial().isLiquid()) {
     *         a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
     *     }
     * }
     */
    protected void doStepSoundUpdate:a((IntVector3) BlockPosition blockposition, (BlockData) Block blockData);

    /*
     * protected void checkBlockCollisions() {
     *     AxisAlignedBB axisalignedbb = getBoundingBox();
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.d(axisalignedbb.a + 0.001D, axisalignedbb.b + 0.001D, axisalignedbb.c + 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition1 = BlockPosition.PooledBlockPosition.d(axisalignedbb.d - 0.001D, axisalignedbb.e - 0.001D, axisalignedbb.f - 0.001D);
     *     BlockPosition.PooledBlockPosition blockposition_pooledblockposition2 = BlockPosition.PooledBlockPosition.s();
     *     ...
     * }
     */
    protected void checkBlockCollisions();

    /*
     * public double ##METHODNAME##(double d0, double d1, double d2) {
     *     double d3 = this.locX - d0;
     *     double d4 = this.locY - d1;
     *     double d5 = this.locZ - d2;
     *
     *     return MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
     * }
     */
    public double calculateDistance:e(double x, double y, double z);

    public boolean damageEntity((DamageSourceHandle) DamageSource damagesource, float damage);

    public void setPosition(double x, double y, double z);

    public void setPositionRotation(double x, double y, double z, float yaw, float pitch);

    public void setLocation(double x, double y, double z, float yaw, float pitch);

    public float getHeadRotation();

    public (AxisAlignedBBHandle) AxisAlignedBB getBoundingBox();

    public void setBoundingBox:a((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb)

#if version >= 1.12
    public (AxisAlignedBBHandle) AxisAlignedBB getOtherBoundingBox:al();
#else
    public (AxisAlignedBBHandle) AxisAlignedBB getOtherBoundingBox:ag();
#endif

    public (AxisAlignedBBHandle) AxisAlignedBB getEntityBoundingBox:j((EntityHandle) Entity entity);

    public void recalcPosition();

    public boolean isBurning();

    public boolean isPassenger();

    public boolean isVehicle();

    public void setOnFire(int numSeconds);

    public optional int prop_getMaxFireTicks:getMaxFireTicks();

    <code>
    public int getMaxFireTicks() {
        if (T.prop_getMaxFireTicks.isAvailable()) {
            return T.prop_getMaxFireTicks.invoke(instance);
        } else if (T.field_maxFireTicks.isAvailable()) {
            return T.field_maxFireTicks.getInteger(instance);
        } else {
            throw new UnsupportedOperationException("Max Fire Ticks can not be read");
        }
    }
    </code>

#if version >= 1.12
    public boolean isWet:an();

#if pre
    // This was on the pre-release version
    public (EntityHandle) Entity getDriverEntity:bC();
#else
    // Official 1.12
    public (EntityHandle) Entity getDriverEntity:bE();
#endif

    public (CommonTagCompound) NBTTagCompound saveToNBT:save((CommonTagCompound) NBTTagCompound compound);
#else
    public boolean isWet:ai();

    public (EntityHandle) Entity getDriverEntity:bw();

    public (CommonTagCompound) NBTTagCompound saveToNBT:e((CommonTagCompound) NBTTagCompound compound);
#endif

#if version >= 1.12
    public void onTick:B_();
#else if version >= 1.11.2
    public void onTick:A_();
#else
    public void onTick:m();
#endif

    public void loadFromNBT:f((CommonTagCompound) NBTTagCompound compound);

    public boolean savePassenger:c((CommonTagCompound) NBTTagCompound compound);

    public boolean saveEntity:d((CommonTagCompound) NBTTagCompound compound);

    public boolean isSneaking();

    public boolean isInSameVehicle:x((EntityHandle) Entity entity);

    public void appendEntityCrashDetails((CrashReportSystemDetailsHandle) CrashReportSystemDetails crashreportsystemdetails);

    public int getId();

    public UUID getUniqueID();

    public (com.bergerkiller.bukkit.common.wrappers.DataWatcher) net.minecraft.server.DataWatcher getDataWatcher();

#if version >= 1.11.2
    public void onPush:f(double d0, double d1, double d2);
#else
    public void onPush:g(double d0, double d1, double d2);
#endif

    // Since MC 1.8.8
    public optional boolean onInteractBy_1_8_8:e((org.bukkit.entity.HumanEntity) EntityHuman entityhuman);

    // Since MC 1.10.2
    public optional boolean onInteractBy_1_10_2:a((org.bukkit.entity.HumanEntity) EntityHuman human, (org.bukkit.inventory.ItemStack) ItemStack itemstack, (org.bukkit.inventory.MainHand) EnumHand enumhand);

    // Since MC 1.11.2
    public optional boolean onInteractBy_1_11_2:b((org.bukkit.entity.HumanEntity) EntityHuman human, (org.bukkit.inventory.MainHand) EnumHand enumhand);


    public void collide((EntityHandle) Entity entity);

    public (org.bukkit.entity.Entity) org.bukkit.craftbukkit.entity.CraftEntity getBukkitEntity();

    <code>
    // Since MC 1.11.2 there is a new move function and signature, which must be dealt with correctly
    // This one handles piston motion specifically with an Enum Move Type, not present <= 1.10.2
    public static final boolean IS_NEW_MOVE_FUNCTION = com.bergerkiller.bukkit.common.Common.evaluateMCVersion(">=", "1.11.2");
    </code>

    <code>
    public WorldServerHandle getWorldServer() {
        return WorldServerHandle.createHandle(T.world.raw.get(instance));
    }

    public org.bukkit.entity.Entity toBukkit() {
        return com.bergerkiller.bukkit.common.conversion.Conversion.toEntity.convert(instance);
    }

    public static EntityHandle fromBukkit(org.bukkit.entity.Entity entity) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toEntityHandle.convert(entity));
    }
    </code>
}
