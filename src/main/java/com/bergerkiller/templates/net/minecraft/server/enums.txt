package net.minecraft.server;

import com.google.common.collect.BiMap;

import com.bergerkiller.generated.net.minecraft.server.EnumDifficultyHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumHandHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumDirectionHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumDirectionHandle.EnumAxisHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumMoveTypeHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumParticleHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumGamemodeHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumProtocolHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumProtocolDirectionHandle;

class EnumDifficulty {
    public int getId:a();

    public static (EnumDifficultyHandle) EnumDifficulty getById(int id);
}

class EnumItemSlot {
    public int getIndex:c();

    <code>
    public static Object fromIndexRaw(int index) {
        for (Object value : T.getType().getEnumConstants()) {
            if (T.getIndex.invoke(value).intValue() == index) {
                return value;
            }
        }
        return null;
    }

    public org.bukkit.inventory.EquipmentSlot toBukkit() {
        return org.bukkit.inventory.EquipmentSlot.values()[((Enum<?>) instance).ordinal()];
    }

    public static Object fromBukkitRaw(org.bukkit.inventory.EquipmentSlot slot) {
        return T.getType().getEnumConstants()[slot.ordinal()];
    }

    public static EnumItemSlotHandle fromBukkit(org.bukkit.inventory.EquipmentSlot slot) {
        return createHandle(T.getType().getEnumConstants()[slot.ordinal()]);
    }
    </code>
}

// Since 1.10.2
optional class EnumHand {
    enum (EnumHandHandle) EnumHand MAIN_HAND;
    enum (EnumHandHandle) EnumHand OFF_HAND;
}

class EnumDirection {
    enum (EnumDirectionHandle) EnumDirection DOWN;
    enum (EnumDirectionHandle) EnumDirection UP;
    enum (EnumDirectionHandle) EnumDirection NORTH;
    enum (EnumDirectionHandle) EnumDirection SOUTH;
    enum (EnumDirectionHandle) EnumDirection WEST;
    enum (EnumDirectionHandle) EnumDirection EAST;

    class EnumDirection.EnumAxis {
        enum (EnumAxisHandle) EnumDirection.EnumAxis X;
        enum (EnumAxisHandle) EnumDirection.EnumAxis Y;
        enum (EnumAxisHandle) EnumDirection.EnumAxis Z;

        <code>
        public int ordinal() {
            return ((Enum<?>) instance).ordinal();
        }
        </code>
    }
}

optional class EnumMoveType {
    enum (EnumMoveTypeHandle) EnumMoveType SELF;
    enum (EnumMoveTypeHandle) EnumMoveType PLAYER;
    enum (EnumMoveTypeHandle) EnumMoveType PISTON;
    enum (EnumMoveTypeHandle) EnumMoveType SHULKER_BOX;
    enum (EnumMoveTypeHandle) EnumMoveType SHULKER;
}

class EnumParticle {
#if version >= 1.10.2
    public static optional (EnumParticleHandle) EnumParticle byName:a(String name);
#else
    public static optional (EnumParticleHandle) EnumParticle byName:???(String name);
#endif

    public String getName:b();

    public int getId:c();

    <code>
    public static EnumParticleHandle getByName(String name) {
        if (T.byName.isAvailable()) {
            return T.byName.invokeVA(name);
        } else {
            for (Object enumValue : T.getType().getEnumConstants()) {
                if (T.getName.invoke(enumValue).equals(name)) {
                    return createHandle(enumValue);
                }
            }
            return null;
        }
    }
    </code>
}

class EnumGamemode {
    int id:f;

    public static (EnumGamemodeHandle) EnumGamemode getById(int id);
}

class EnumProtocol {
    enum (EnumProtocolHandle) EnumProtocol PLAY;

#if version >= 1.10.2
    private final rawtype (Map<EnumProtocolDirectionHandle, BiMap>) Map<EnumProtocolDirection, BiMap<Integer, Class<? extends Packet<?>>>> packetMap:h;
#else
    private final rawtype (Map<EnumProtocolDirectionHandle, BiMap>) Map<EnumProtocolDirection, BiMap<Integer, Class<? extends Packet>>> packetMap:j;
#endif
}

class EnumProtocolDirection {
    enum (EnumProtocolDirectionHandle) EnumProtocolDirection SERVERBOUND;
    enum (EnumProtocolDirectionHandle) EnumProtocolDirection CLIENTBOUND;
}

// version >= 1.12
optional class ChatMessageType {
    public byte getId:a();

    public static (Object) ChatMessageType getRawById:a(byte id);
}
