package net.minecraft.server;

import com.bergerkiller.generated.net.minecraft.server.AxisAlignedBBHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumDirectionHandle.EnumAxisHandle;
import com.bergerkiller.generated.net.minecraft.server.VoxelShapeHandle;

class AxisAlignedBB {
    public final double minX:a;
    public final double minY:b;
    public final double minZ:c;
    public final double maxX:d;
    public final double maxY:e;
    public final double maxZ:f;

    public (AxisAlignedBBHandle) AxisAlignedBB(double x1, double y1, double z1, double x2, double y2, double z2);

    public (AxisAlignedBBHandle) AxisAlignedBB grow(double sx, double sy, double sz);

    <code>
    public AxisAlignedBBHandle growUniform(double size) {
        return grow(size, size, size);
    }

    public AxisAlignedBBHandle shrinkUniform(double size) {
        return growUniform(-size);
    }
    </code>

#if version >= 1.11
    public (AxisAlignedBBHandle) AxisAlignedBB transformB:b(double lx, double ly, double lz);

    public (AxisAlignedBBHandle) AxisAlignedBB translate:d(double dx, double dy, double dz);

    public boolean bbTransformA:c((AxisAlignedBBHandle) AxisAlignedBB paramAxisAlignedBB);
#else
    public (AxisAlignedBBHandle) AxisAlignedBB transformB:a(double lx, double ly, double lz);

    public (AxisAlignedBBHandle) AxisAlignedBB translate:c(double dx, double dy, double dz);

    public boolean bbTransformA:b((AxisAlignedBBHandle) AxisAlignedBB paramAxisAlignedBB);
#endif

#if version >= 1.13
    // These methods were removed in MC 1.13
    public double calcSomeX((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb, double d0) {
        if (axisalignedbb.e > instance.b && axisalignedbb.b < instance.e && axisalignedbb.f > instance.c && axisalignedbb.c < instance.f) {
            double d1;

            if (d0 > 0.0D && axisalignedbb.d <= instance.a) {
                d1 = instance.a - axisalignedbb.d;
                if (d1 < d0) {
                    d0 = d1;
                }
            } else if (d0 < 0.0D && axisalignedbb.a >= instance.d) {
                d1 = instance.d - axisalignedbb.a;
                if (d1 > d0) {
                    d0 = d1;
                }
            }

            return d0;
        } else {
            return d0;
        }
    }
    public double calcSomeY((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb, double d0) {
        if (axisalignedbb.d > instance.a && axisalignedbb.a < instance.d && axisalignedbb.f > instance.c && axisalignedbb.c < instance.f) {
            double d1;

            if (d0 > 0.0D && axisalignedbb.e <= instance.b) {
                d1 = instance.b - axisalignedbb.e;
                if (d1 < d0) {
                    d0 = d1;
                }
            } else if (d0 < 0.0D && axisalignedbb.b >= instance.e) {
                d1 = instance.e - axisalignedbb.b;
                if (d1 > d0) {
                    d0 = d1;
                }
            }

            return d0;
        } else {
            return d0;
        }
    }
    public double calcSomeZ((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb, double d0) {
        if (axisalignedbb.d > instance.a && axisalignedbb.a < instance.d && axisalignedbb.e > instance.b && axisalignedbb.b < instance.e) {
            double d1;

            if (d0 > 0.0D && axisalignedbb.f <= instance.c) {
                d1 = instance.c - axisalignedbb.f;
                if (d1 < d0) {
                    d0 = d1;
                }
            } else if (d0 < 0.0D && axisalignedbb.c >= instance.f) {
                d1 = instance.f - axisalignedbb.c;
                if (d1 > d0) {
                    d0 = d1;
                }
            }

            return d0;
        } else {
            return d0;
        }
    }
#else
    public double calcSomeX:a((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb, double d0);
    public double calcSomeY:b((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb, double d0);
    public double calcSomeZ:c((AxisAlignedBBHandle) AxisAlignedBB axisalignedbb, double d0);
#endif
}

class VoxelShape {

#if version >= 1.13
    public static (VoxelShapeHandle) VoxelShape empty() {
        return VoxelShapes.a();
    }

    public static (Object) VoxelShape createRawFromAABB((Object) List<AxisAlignedBB> handles) {
        if (handles.isEmpty()) {
            return VoxelShapes.a();
        } else {
            VoxelShape shape = null;
            java.util.Iterator iter = handles.iterator();
            while (iter.hasNext()) {
                AxisAlignedBB aabb = (AxisAlignedBB) iter.next();
                VoxelShape aabb_shape = VoxelShapes.a(aabb);
                if (shape == null) {
                    shape = aabb_shape;
                } else {
                    shape = VoxelShapes.a(shape, aabb_shape); // OR
                }
            }
            return shape;
        }
    }

    public double traceAxis((EnumAxisHandle) EnumDirection.EnumAxis axis, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double coordinate) {
        return VoxelShapes.a(axis, boundingBox, instance, coordinate);
    }

    public boolean isEmpty:b();
#else
    public static (VoxelShapeHandle) net.minecraft.server.VoxelShape empty() {
        return com.bergerkiller.bukkit.common.internal.proxy.VoxelShapeProxy.EMPTY;
    }

    public static (Object) net.minecraft.server.VoxelShape createRawFromAABB((Object) List<AxisAlignedBB> handles) {
        return com.bergerkiller.bukkit.common.internal.proxy.VoxelShapeProxy.fromNMSAABB(handles);
    }

    public double traceAxis((EnumAxisHandle) net.minecraft.server.EnumDirection.EnumAxis axis, AxisAlignedBBHandle boundingBox, double coordinate) {
        if (axis == net.minecraft.server.EnumDirection.EnumAxis.X) {
            return instance.traceXAxis(boundingBox, coordinate);
        } else if (axis == net.minecraft.server.EnumDirection.EnumAxis.Y) {
            return instance.traceYAxis(boundingBox, coordinate);
        } else if (axis == net.minecraft.server.EnumDirection.EnumAxis.Z) {
            return instance.traceZAxis(boundingBox, coordinate);
        }
        return coordinate;
    }

    public boolean isEmpty();
#endif

}