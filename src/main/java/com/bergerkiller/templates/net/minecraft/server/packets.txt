package net.minecraft.server;

import com.bergerkiller.bukkit.common.wrappers.ChatText;
import com.bergerkiller.bukkit.common.wrappers.UseAction;
import com.bergerkiller.bukkit.common.wrappers.ResourceKey;
import com.bergerkiller.bukkit.common.wrappers.ChatText;
import com.bergerkiller.bukkit.common.wrappers.HumanHand;
import com.bergerkiller.bukkit.common.bases.IntVector3;
import com.bergerkiller.bukkit.common.nbt.CommonTagCompound;

import com.bergerkiller.generated.net.minecraft.server.MobEffectListHandle;
import com.bergerkiller.generated.net.minecraft.server.MobEffectHandle;
import com.bergerkiller.generated.net.minecraft.server.SoundCategoryHandle;

import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutScoreboardScoreHandle.EnumScoreboardActionHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayInUseEntityHandle.EnumEntityUseActionHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutTitleHandle.EnumTitleActionHandle
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutRemoveEntityEffectHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutMapChunkHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutMapChunkHandle.ChunkMapHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutAttachEntityHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityEquipmentHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutMountHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityMetadataHandle

class Packet {
    <code>
    public com.bergerkiller.bukkit.common.protocol.CommonPacket toCommonPacket() {
        return new com.bergerkiller.bukkit.common.protocol.CommonPacket(instance);
    }
    </code>

    // Protocol translation functions
    <code>
    protected static final int serializeVelocity(double velocity) {
        return (int) (com.bergerkiller.bukkit.common.utils.MathUtil.clamp(velocity, 3.9) * 8000.0);
    }

    protected static final double deserializeVelocity(int protVelocity) {
        return (double) protVelocity / 8000.0;
    }

    protected static final int serializePosition_1_8_8(double position) {
        return com.bergerkiller.bukkit.common.utils.MathUtil.floor(position * 32.0);
    }

    protected static final double deserializePosition_1_8_8(int protPosition) {
        return (double) protPosition / 32.0;
    }

    protected static final int serializePosition_1_10_2(double position) {
        return com.bergerkiller.bukkit.common.utils.MathUtil.floor(position * 4096.0);
    }

    protected static final double deserializePosition_1_10_2(int protPosition) {
        return (double) protPosition / 4096.0;
    }

    protected static final int serializeRotation(float rotation) {
        return com.bergerkiller.bukkit.common.utils.MathUtil.floor(rotation * 256.0f / 360.0f);
    }

    protected static final float deserializeRotation(int protRotation) {
        return (float) protRotation * 360.0f / 256.0f;
    }

    protected final double getProtocolPosition(Template.Field.Byte field_1_8_8, Template.Field.Integer field_1_10_2) {
        if (field_1_10_2.isAvailable()) {
            return deserializePosition_1_10_2(field_1_10_2.getInteger(instance));
        } else {
            return deserializePosition_1_8_8((int) field_1_8_8.getByte(instance));
        }
    }

    protected final void setProtocolPosition(Template.Field.Byte field_1_8_8, Template.Field.Integer field_1_10_2, double position) {
        if (field_1_10_2.isAvailable()) {
            field_1_10_2.setInteger(instance, serializePosition_1_10_2(position));
        } else {
            field_1_8_8.setByte(instance, (byte) serializePosition_1_8_8(position));
        }
    }

    protected final double getProtocolPosition(Template.Field.Integer field_1_8_8, Template.Field.Double field_1_10_2) {
        if (field_1_10_2.isAvailable()) {
            return field_1_10_2.getDouble(instance);
        } else {
            return deserializePosition_1_8_8(field_1_8_8.getInteger(instance));
        }
    }

    protected final void setProtocolPosition(Template.Field.Integer field_1_8_8, Template.Field.Double field_1_10_2, double position) {
        if (field_1_10_2.isAvailable()) {
            field_1_10_2.setDouble(instance, position);
        } else {
            field_1_8_8.setInteger(instance, serializePosition_1_8_8(position));
        }
    }

    protected final float getProtocolRotation(Template.Field.Byte field) {
        return deserializeRotation((int) field.getByte(instance));
    }

    protected final void setProtocolRotation(Template.Field.Byte field, float rotation) {
        field.setByte(instance, (byte) serializeRotation(rotation));
    }
    </code>
}

class PacketPlayInKeepAlive extends Packet {
#if version >= 1.12.2
    private (Long) long key:a;
#else
    private (Long) int key:a;
#endif
}

class PacketPlayOutKeepAlive extends Packet {
#if version >= 1.12.2
    private (Long) long key:a;
#else
    private (Long) int key:a;
#endif
}

class PacketPlayOutScoreboardScore extends Packet {
    class PacketPlayOutScoreboardScore.EnumScoreboardAction {
        enum (EnumScoreboardActionHandle) PacketPlayOutScoreboardScore.EnumScoreboardAction CHANGE;
        enum (EnumScoreboardActionHandle) PacketPlayOutScoreboardScore.EnumScoreboardAction REMOVE;
    }
}

class PacketPlayInUseEntity extends Packet {
    private int usedEntityId:a;
    private (UseAction) PacketPlayInUseEntity.EnumEntityUseAction action;
    private (org.bukkit.util.Vector) Vec3D offset:c;
#if version >= 1.9
    private optional (Object) EnumHand enumHand:d;
#else
    private optional (Object) EnumHand enumHand:???;
#endif

    class PacketPlayInUseEntity.EnumEntityUseAction {
        enum (EnumEntityUseActionHandle) PacketPlayInUseEntity.EnumEntityUseAction INTERACT;
        enum (EnumEntityUseActionHandle) PacketPlayInUseEntity.EnumEntityUseAction ATTACK;
        enum (EnumEntityUseActionHandle) PacketPlayInUseEntity.EnumEntityUseAction INTERACT_AT;
    }
}

optional class PacketPlayInUseItem extends Packet {
    private (IntVector3) BlockPosition position:a;
    private (Object) EnumDirection direction:b;
    private (Object) EnumHand enumHand:c;
    private float unknown1:d;
    private float unknown2:e;
    private float unknown3:f;
#if version >= 1.10.2
    public optional long timestamp;
#else
    public optional long timestamp:???;
#endif
}

class PacketPlayOutTitle extends Packet {
    class PacketPlayOutTitle.EnumTitleAction {
        enum (EnumTitleActionHandle) PacketPlayOutTitle.EnumTitleAction TITLE;
        enum (EnumTitleActionHandle) PacketPlayOutTitle.EnumTitleAction SUBTITLE;
        enum optional (EnumTitleActionHandle) PacketPlayOutTitle.EnumTitleAction ACTIONBAR;
        enum (EnumTitleActionHandle) PacketPlayOutTitle.EnumTitleAction TIMES;
        enum (EnumTitleActionHandle) PacketPlayOutTitle.EnumTitleAction CLEAR;
        enum (EnumTitleActionHandle) PacketPlayOutTitle.EnumTitleAction RESET;
    }
}

class PacketPlayOutChat extends Packet {
    private (ChatText) IChatBaseComponent text:a;

    // Spigot only
    public optional (Object[]) net.md_5.bungee.api.chat.BaseComponent[] components;

#if version >= 1.12
    private (com.bergerkiller.bukkit.common.wrappers.ChatMessageType) ChatMessageType type:b;
#else
    private (com.bergerkiller.bukkit.common.wrappers.ChatMessageType) byte type:b;
#endif
}

class PacketPlayOutCollect extends Packet {
    private int collectedItemId:a;
    private int collectorEntityId:b;

    // since 1.11.2
    private optional int unknown:c;
}

class PacketPlayOutWindowItems extends Packet {
    private int windowId:a;

#if version >= 1.11
    private (List<org.bukkit.inventory.ItemStack>) List<ItemStack> items:b;
#else
    private (List<org.bukkit.inventory.ItemStack>) ItemStack[] items:b;
#endif
}

class PacketPlayInArmAnimation extends Packet {
#if version >= 1.9
    private optional (Object) EnumHand enumHand:a;
#else
    private optional (Object) EnumHand enumHand:???;
#endif
}

class PacketPlayInBlockPlace extends Packet {
#if version >= 1.9
    private optional (Object) EnumHand enumHand:a;
#else
    private optional (Object) EnumHand enumHand:???;
#endif

    // Spigot only
    public optional long timestamp;
}

class PacketPlayOutRemoveEntityEffect extends Packet {
    private int entityId:a;
#if version >= 1.9
    private (MobEffectListHandle) MobEffectList effectList:b;
#else
    private (MobEffectListHandle) int effectList:b;
#endif

    public (PacketPlayOutRemoveEntityEffectHandle) PacketPlayOutRemoveEntityEffect();

    <code>
    public static PacketPlayOutRemoveEntityEffectHandle createNew(int entityId, MobEffectListHandle mobEffectList) {
        PacketPlayOutRemoveEntityEffectHandle handle = createNew();
        handle.setEntityId(entityId);
        handle.setEffectList(mobEffectList);
        return handle;
    }
    </code>
}

class PacketPlayOutLogin extends Packet {
    private int playerId:a;
    private boolean hardcore:b;
    private (org.bukkit.GameMode) EnumGamemode gameMode:c;
    private int dimension:d;
    private (org.bukkit.Difficulty) EnumDifficulty difficulty:e;
    private int maxPlayers:f;
    private (org.bukkit.WorldType) WorldType worldType:g;
    private boolean unknown1:h;
}

class PacketPlayOutMap extends Packet {
    private int itemId:a;
    private byte scale:b;

#if version >= 1.9
    private optional boolean track:c;
    private (org.bukkit.map.MapCursor[]) MapIcon[] cursors:d;
    private int xmin:e;
    private int ymin:f;
    private int width:g;
    private int height:h;
    private byte[] pixels:i;
#else
    private optional boolean track:???;
    private (org.bukkit.map.MapCursor[]) MapIcon[] cursors:c;
    private int xmin:d;
    private int ymin:e;
    private int width:f;
    private int height:g;
    private byte[] pixels:h;
#endif
}

class PacketPlayOutMapChunk extends Packet {
    private int x:a;
    private int z:b;

#if version >= 1.9.4
    private optional int sectionsMask:c;
    private optional byte[] data:d;
    private optional (List<CommonTagCompound>) List<NBTTagCompound> tags:e;
    private optional (PacketPlayOutMapChunkHandle.ChunkMapHandle) PacketPlayOutMapChunk.ChunkMap chunkInfo:???;
    private boolean hasBiomeData:f;
#elseif version >= 1.9
    private optional int sectionsMask:c;
    private optional byte[] data:d;
    private optional (List<CommonTagCompound>) List<NBTTagCompound> tags:???;
    private optional (PacketPlayOutMapChunkHandle.ChunkMapHandle) PacketPlayOutMapChunk.ChunkMap chunkInfo:???;
    private boolean hasBiomeData:e;
#else
    private optional int sectionsMask:???;
    private optional byte[] data:???;
    private optional (List<CommonTagCompound>) List<NBTTagCompound> tags:???;
    private optional (PacketPlayOutMapChunkHandle.ChunkMapHandle) PacketPlayOutMapChunk.ChunkMap chunkInfo:c;
    private boolean hasBiomeData:d;
#endif

    <code>
    public int getSectionsMask() {
        if (T.sectionsMask.isAvailable()) {
            return T.sectionsMask.get(instance);
        } else {
            return T.chunkInfo.get(instance).getSectionsMask();
        }
    }

    public void setSectionsMask(int sectionsMask) {
        if (T.sectionsMask.isAvailable()) {
            T.sectionsMask.set(instance, sectionsMask);
        } else {
            T.chunkInfo.get(instance).setSectionsMask(sectionsMask);
        }
    }

    public byte[] getData() {
        if (T.data.isAvailable()) {
            return T.data.get(instance);
        } else {
            return T.chunkInfo.get(instance).getData();
        }
    }
    
    public void setData(byte[] data) {
        if (T.data.isAvailable()) {
            T.data.set(instance, data);
        } else {
            T.chunkInfo.get(instance).setData(data);
        }
    }

    public List<CommonTagCompound> getTags() {
        if (T.tags.isAvailable()) {
            return T.tags.get(instance);
        } else {
            return java.util.Collections.emptyList();
        }
    }

    public void setTags(List<CommonTagCompound> tags) {
        if (T.tags.isAvailable()) {
            T.tags.set(instance, tags);
        } else {
            // Unsupported. Do nothing.
        }
    }
    </code>

    // MC 1.8.8
    public optional (PacketPlayOutMapChunkHandle) PacketPlayOutMapChunk((org.bukkit.Chunk) Chunk chunk, boolean flag, int sectionsMask);

    // MC >= 1.9
    public optional (PacketPlayOutMapChunkHandle) PacketPlayOutMapChunk((org.bukkit.Chunk) Chunk chunk, int sectionsMask);

    <code>
    public static PacketPlayOutMapChunkHandle createNew(org.bukkit.Chunk chunk, int sectionsMask) {
        if (T.constr_chunk_sectionsMask.isAvailable()) {
            return T.constr_chunk_sectionsMask.newInstance(chunk, sectionsMask);
        } else {
            boolean flag = WorldHandle.fromBukkit(chunk.getWorld()).getWorldProvider().isDarkWorld();
            return T.constr_chunk_flag_sectionsMask.newInstance(chunk, flag, sectionsMask);
        }
    }
    </code>

    // MC 1.8.8 only
    optional class PacketPlayOutMapChunk.ChunkMap {
        public byte[] data:a;
        public int sectionsMask:b;
    }
}

// Only >= MC 1.9 (MC 1.8.8 relies on clients themselves to unload as needed, for some reason)
optional class PacketPlayOutUnloadChunk extends Packet {
    private int cx:a;
    private int cz:b;
}

class PacketPlayOutNamedSoundEffect extends Packet {
#if version >= 1.9
    private (ResourceKey) SoundEffect sound:a;
    private optional (String) SoundCategory category_1_10_2:b;
    private int x:c;
    private int y:d;
    private int z:e;
    private float volume:f;
    private optional int pitch_1_8_8:???;
    private optional float pitch_1_10_2:g;
#else
    private (ResourceKey) String sound:a;
    private optional (String) SoundCategory category_1_10_2:???;
    private int x:b;
    private int y:c;
    private int z:d;
    private float volume:e;
    private optional int pitch_1_8_8:f;
    private optional float pitch_1_10_2:???;
#endif

    // Accessor functions for pitch
    <code>
    public float getPitch() {
        if (T.pitch_1_10_2.isAvailable()) {
            return T.pitch_1_10_2.getFloat(instance);
        } else {
            return (float) T.pitch_1_8_8.getInteger(instance) / 63.0f;
        }
    }

    public void setPitch(float pitch) {
        if (T.pitch_1_10_2.isAvailable()) {
            T.pitch_1_10_2.setFloat(instance, pitch);
        } else {
            T.pitch_1_8_8.setInteger(instance, (int) (pitch * 63.0f));
        }
    }
    </code>

    // Accessor function for sound category (by name)
    // On MC 1.8.8 this does nothing (always returns "master")
    <code>
    public String getCategory() {
        if (T.category_1_10_2.isAvailable()) {
            return T.category_1_10_2.get(instance);
        } else {
            return "master";
        }
    }

    public void setCategory(String categoryName) {
        if (T.category_1_10_2.isAvailable()) {
            T.category_1_10_2.set(instance, categoryName);
        } else {
            // Do nothing, unused
        }
    }
    </code>

}

// Since MC 1.9
optional class PacketPlayOutCustomSoundEffect extends Packet {
    private (ResourceKey) String sound:a;
    private (String) SoundCategory category:b;
    private int x:c;
    private int y:d;
    private int z:e;
    private float volume:f;
    private float pitch:g;
}

class PacketPlayOutPosition extends Packet {
    private double x:a;
    private double y:b;
    private double z:c;
    private float yaw:d;
    private float pitch:e;
    private (Set<?>) Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> teleportFlags:f;

    // >= MC 1.9
    private optional int teleportWaitTimer:g;

    <code>
    public int getTeleportWaitTimer() {
        if (T.teleportWaitTimer.isAvailable()) {
            return T.teleportWaitTimer.getInteger(instance);
        } else {
            return 0;
        }
    }

    public void setTeleportWaitTimer(int ticks) {
        if (T.teleportWaitTimer.isAvailable()) {
            T.teleportWaitTimer.setInteger(instance, ticks);
        }
    }
    </code>
}

// Available >= MC 1.9
optional class PacketPlayOutBoss extends Packet {
    private UUID entityUUID:a;
    private (Object) PacketPlayOutBoss.Action action:b;
    private (Object) IChatBaseComponent chat:c;
    private float progress:d;
    private (Object) BossBattle.BarColor bossBarColor:e;
    private (Object) BossBattle.BarStyle bossBarStyle:f;
    private boolean unknown1:g;
    private boolean unknown2:h;
    private boolean unknown3:i;
}

class PacketPlayOutAttachEntity extends Packet {
#if version >= 1.9
    private optional int leashId:???;
    private int passengerId:a;
    private int vehicleId:b;
#else
    private optional int leashId:a;
    private int passengerId:b;
    private int vehicleId:c;
#endif

    // MC 1.8.8
    public optional (PacketPlayOutAttachEntityHandle) PacketPlayOutAttachEntity(int leashId, (org.bukkit.entity.Entity) Entity passengerEntity, (org.bukkit.entity.Entity) Entity vehicleEntity);

    // >= MC 1.9
    public optional (PacketPlayOutAttachEntityHandle) PacketPlayOutAttachEntity((org.bukkit.entity.Entity) Entity passengerEntity, (org.bukkit.entity.Entity) Entity vehicleEntity);

    <code>
    public static PacketPlayOutAttachEntityHandle createNew(org.bukkit.entity.Entity passengerEntity, org.bukkit.entity.Entity vehicleEntity) {
        if (T.constr_passengerEntity_vehicleEntity.isAvailable()) {
            return T.constr_passengerEntity_vehicleEntity.newInstance(passengerEntity, vehicleEntity);
        } else {
            return T.constr_leashId_passengerEntity_vehicleEntity.newInstance(0, passengerEntity, vehicleEntity);
        }
    }
    </code>
}

class PacketPlayOutEntityEquipment extends Packet {
    private int entityId:a;
#if version >= 1.9
    private (org.bukkit.inventory.EquipmentSlot) EnumItemSlot slot:b;
#else
    private (org.bukkit.inventory.EquipmentSlot) int slot:b;
#endif
    private (org.bukkit.inventory.ItemStack) ItemStack itemStack:c;

#if version >= 1.9
    public (PacketPlayOutEntityEquipmentHandle) PacketPlayOutEntityEquipment(int entityId, (org.bukkit.inventory.EquipmentSlot) EnumItemSlot slot, (org.bukkit.inventory.ItemStack) ItemStack itemStack);
#else
    public (PacketPlayOutEntityEquipmentHandle) PacketPlayOutEntityEquipment(int entityId, (org.bukkit.inventory.EquipmentSlot) int slot, (org.bukkit.inventory.ItemStack) ItemStack itemStack);
#endif
}

// Only available >= MC 1.9
optional class PacketPlayOutMount extends Packet {
    private int entityId:a;
    private int[] mountedEntityIds:b;

    public (PacketPlayOutMountHandle) PacketPlayOutMount();

    <code>
    public static PacketPlayOutMountHandle createNew(int entityId, int[] mountedEntityIds) {
        PacketPlayOutMountHandle handle = createNew();
        handle.setEntityId(entityId);
        handle.setMountedEntityIds(mountedEntityIds);
        return handle;
    }
    </code>
}

class PacketPlayOutCombatEvent {
    public (Object) PacketPlayOutCombatEvent.EnumCombatEventType eventType:a;
    public int entityId1:b;
    public int entityId2:c;
    public int tickDuration:d;
#if version >= 1.9
    public (ChatText) IChatBaseComponent message:e;
#else
    public (ChatText) String message:e;
#endif
}

// Only >= MC 1.9
optional class PacketPlayOutSetCooldown extends Packet {
    private (org.bukkit.Material) Item material:a;
    private int cooldown:b;
}

class PacketPlayOutScoreboardTeam extends Packet {
    private String name:a;
    private String displayName:b;
    private String prefix:c;
    private String suffix:d;
    private String visibility:e;
#if version >= 1.9
    private optional String collisionRule:f;
    private int chatFormat:g;
    private final Collection<String> players:h;
    private int mode:i;
    private int friendlyFire:j;
#else
    private optional String collisionRule:???;
    private int chatFormat:f;
    private final Collection<String> players:g;
    private int mode:h;
    private int friendlyFire:i;
#endif
}

class PacketPlayInSettings extends Packet {
    private String lang:a;
    private int view:b;
    private (Object) EntityHuman.EnumChatVisibility chatVisibility:c;
    private boolean enableColors:d;
    private int modelPartFlags:e;
    private optional (HumanHand) EnumMainHand mainHand:f;

    <code>
    public HumanHand getMainHand() {
        if (T.mainHand.isAvailable()) {
            return T.mainHand.get(instance);
        } else {
            return HumanHand.RIGHT;
        }
    }

    public void setMainHand(HumanHand mainHand) {
        if (T.mainHand.isAvailable()) {
            T.mainHand.set(instance, mainHand);
        }
    }
    </code>
}

class PacketPlayInTabComplete extends Packet {
    private String text:a;
#if version >= 1.9
    private optional boolean assumeCommand:b;
    private (IntVector3) BlockPosition position:c;
#else
    private optional boolean assumeCommand:???;
    private (IntVector3) BlockPosition position:b;
#endif
}

class PacketPlayInResourcePackStatus extends Packet {
    private optional String message:a;
#if version >= 1.9
    public (Object) PacketPlayInResourcePackStatus.EnumResourcePackStatus status;
#else
    public (Object) PacketPlayInResourcePackStatus.EnumResourcePackStatus status:b;
#endif
}

class PacketPlayInSetCreativeSlot extends Packet {
    private int slot;
    private (org.bukkit.inventory.ItemStack) ItemStack item:b;
}

class PacketPlayOutEntityMetadata extends Packet {
    private int entityId:a;
#if version >= 1.9
    private (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<Object>>) List<DataWatcher.Item<?>> metadataItems:b;
#else
    private (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<Object>>) List<DataWatcher.WatchableObject> metadataItems:b;
#endif

    public (PacketPlayOutEntityMetadataHandle) PacketPlayOutEntityMetadata(int entityId, (com.bergerkiller.bukkit.common.wrappers.DataWatcher) DataWatcher datawatcher, boolean includeUnchangedData);
}

class PacketPlayInUpdateSign extends Packet {
    private (IntVector3) BlockPosition position:a;
#if version >= 1.9
    private (ChatText[]) String[] lines:b;
#else
    private (ChatText[]) IChatBaseComponent[] lines:b;
#endif
}

class PacketPlayInWindowClick extends Packet {
    private int windowId:a;
    private int slot;
    private int button;
    private short action:d;
    private (org.bukkit.inventory.ItemStack) ItemStack item;
#if version >= 1.9
    private (com.bergerkiller.bukkit.common.wrappers.InventoryClickType) InventoryClickType mode:shift;
#else
    private (com.bergerkiller.bukkit.common.wrappers.InventoryClickType) int mode:shift;
#endif
}

// Since MC 1.9
optional class PacketPlayInTeleportAccept extends Packet {
    private int teleportId:a;
}

// Only <= MC 1.8.8
optional class PacketPlayOutUpdateSign {
    private (org.bukkit.World) World world:a;
    private (IntVector3) BlockPosition position:b;
    private (ChatText[]) IChatBaseComponent[] lines:c;
}