package net.minecraft.server;

import com.bergerkiller.bukkit.common.bases.IntVector3;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key;

import com.bergerkiller.generated.net.minecraft.server.MobEffectHandle;
import com.bergerkiller.generated.net.minecraft.server.AttributeMapServerHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityItemHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.ItemStackHandle;
import com.bergerkiller.generated.net.minecraft.server.AttributeInstanceHandle;

class EntityLiving extends Entity {
#if version >= 1.10.2
    #if version >= 1.12
        protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:at;
        public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:g;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:h;
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:br;
    #elseif version >= 1.11.2
        protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:at;
        public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:g;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:h;
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:bq;
    #else
        protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:au;
        public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:f;
        private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:g;
        private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:h;
    #endif
#else
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:???;
    public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:???;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:???;
#endif

    <code>
    public static final Key<Byte> DATA_LIVING_FLAGS = Key.fromTemplate(T.DATA_LIVING_FLAGS, -1, byte.class);
    public static final Key<Float> DATA_HEALTH = Key.fromTemplate(T.DATA_HEALTH, 6, float.class);
    public static final Key<Integer> DATA_PARTICLES_TIMER = Key.fromTemplate(T.DATA_PARTICLES_TIMER, 7, int.class);
    public static final Key<Boolean> DATA_PARTICLES_HIDDEN = Key.fromTemplate(T.DATA_PARTICLES_HIDDEN, 8, byte.class);
    public static final Key<Integer> DATA_UNKNOWN1 = Key.fromTemplate(T.DATA_ARROWCOUNT, 9, byte.class);
    </code>


#if version >= 1.11.2
    private (AttributeMapServerHandle) AttributeMapBase attributeMapField:attributeMap;
#else
    private (AttributeMapServerHandle) AttributeMapBase attributeMapField:br;
#endif

    public final (Map<Object, Object>) Map<MobEffectList, MobEffect> mobEffects:effects;

    public float lastDamage;
#if version >= 1.11.2
    protected unknown boolean bd;
    public unknown float be;
    public float forwardMovement:bf;
    public unknown float bg;
#else
    protected unknown boolean be;
    public unknown float bf;
    public float forwardMovement:bg;
    public unknown float bh;
#endif

    public boolean updateEffects;

    public (Collection<MobEffectHandle>) Collection<MobEffect> getEffects();

    public abstract (org.bukkit.inventory.ItemStack) ItemStack getEquipment((org.bukkit.inventory.EquipmentSlot) EnumItemSlot paramEnumItemSlot)

    protected void resetAttributes:initAttributes();

    public (AttributeMapServerHandle) AttributeMapBase getAttributeMap();

    public (AttributeInstanceHandle) AttributeInstance getAttributeInstance((Object) IAttribute iattribute);

    public final float getHealth();

    public final float getMaxHealth();
}

class EntityHuman extends EntityLiving {
    public (Object) PlayerInventory inventoryRaw:inventory;
#if version >= 1.12
    protected (Object) InventoryEnderChest enderChestRaw:enderChest;
#else
    private (Object) InventoryEnderChest enderChestRaw:enderChest;
#endif
    public unknown Container defaultContainer;
    public unknown Container activeContainer;
    protected (Object) FoodMetaData foodDataRaw:foodData;

    public boolean sleeping;
    public (IntVector3) BlockPosition bedPosition;
    public int sleepTicks;

#if version >= 1.12
    public unknown float bM;
    public unknown float bN;
    private (IntVector3) BlockPosition spawnCoord:d;
    private boolean spawnForced:e;
#elseif version >= 1.11.2
    public unknown float bI;
    public unknown float bJ;
    private (IntVector3) BlockPosition spawnCoord:e;
    private boolean spawnForced:f;
    private unknown BlockPosition g;
#else
    public unknown float bJ;
    public unknown float bK;
    private (IntVector3) BlockPosition spawnCoord:e;
    private boolean spawnForced:f;
    private unknown BlockPosition g;
#endif

    public (com.bergerkiller.bukkit.common.wrappers.PlayerAbilities) PlayerAbilities abilities;
    public int expLevel;
    public int expTotal;
    public float exp;
#if version >= 1.12
    protected unknown int bS;
    protected unknown float bT = 0.02F;
    private unknown int f;
    private final com.mojang.authlib.GameProfile gameProfile:g;
#elseif version >= 1.11.2
    private unknown int h;
    protected unknown float bO;
    protected unknown float bP;
    private unknown int bR;
    private final com.mojang.authlib.GameProfile gameProfile:bS;
#else
    private unknown int h;
    protected unknown float bP;
    protected unknown float bQ;
    private unknown int bS;
    private final com.mojang.authlib.GameProfile gameProfile:bT;
#endif

    public String spawnWorld;
}

class EntityPlayer extends EntityHuman {
    public (Object) PlayerConnection playerConnection;
    public double chunkSyncX:d;
    public double chunkSyncZ:e;
    public final optional List<Integer> removeQueue;
    public int ping;
}

class EntityInsentient extends EntityLiving {
    public (EntityHandle) Entity getLeashHolder();

    public (Object) NavigationAbstract getNavigation();
}

class EntityItem extends Entity {
    private int age;
    public int pickupDelay;

    public (EntityItemHandle) EntityItem((WorldHandle) World world, double x, double y, double z, (ItemStackHandle) ItemStack itemstack);

    public (ItemStackHandle) ItemStack getItemStack();

    public void setItemStack((ItemStackHandle) ItemStack itemstack);
}

class EntityHanging extends Entity {
    public (IntVector3) BlockPosition blockPosition;
}

class EntityMinecartAbstract extends Entity {
    private static final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_SHAKING_FACTOR:a;
    private static final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_SHAKING_DIRECTION:b;
    private static final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_SHAKING_DAMAGE:c;
    private static final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_BLOCK_TYPE:d;
    private static final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_BLOCK_OFFSET:e;
    private static final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_BLOCK_VISIBLE:f;

    public float getDamage();
    public void setDamage(float damage);
    public int getType();
    public void activate:a(int x, int y, int z, boolean active);
}

class EntityMinecartRideable extends EntityMinecartAbstract {

}

class EntityMinecartFurnace extends EntityMinecartAbstract {
    private static final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_SMOKING:c;
    private int fuel:d;
    public double pushForceX:a;
    public double pushForceZ:b;
}

class EntityMinecartHopper extends EntityMinecartAbstract {
    private int suckingCooldown:b;

#if version >= 1.12
    public boolean suckItems:H();
#else
    public boolean suckItems:I();
#endif

    public boolean isSuckingEnabled:isEnabled();
    public void setSuckingEnabled:setEnabled(boolean enabled);
}

class EntityMinecartTNT extends EntityMinecartAbstract {
    private int fuse:a;

    protected void explode:c(double damage);
    public void prime:j();
}

class EntityMinecartCommandBlock extends EntityMinecartAbstract {
#if version >= 1.11.2
    public static final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_COMMAND:COMMAND;
#else
    public static final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_COMMAND:a;
#endif
}