package net.minecraft.server;

import com.bergerkiller.bukkit.common.bases.IntVector3;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher;
import com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key;

import com.bergerkiller.generated.net.minecraft.server.MobEffectHandle;
import com.bergerkiller.generated.net.minecraft.server.MobEffectListHandle;
import com.bergerkiller.generated.net.minecraft.server.AttributeMapServerHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityItemHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.ItemStackHandle;
import com.bergerkiller.generated.net.minecraft.server.AttributeInstanceHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityItemFrameHandle;
import com.bergerkiller.generated.net.minecraft.server.ContainerHandle;

class EntityLiving extends Entity {

#if version >= 1.12
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:at;
    public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:g;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:h;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:br;
#elseif version >= 1.11
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:at;
    public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:g;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:h;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:bq;
#elseif version >= 1.10.2
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:au;
    public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:f;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:g;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:h;
#elseif version >= 1.9.4
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:at;
    public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:f;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:g;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:h;
#elseif version >= 1.9
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:as;
    public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:HEALTH;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:f;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:g;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:h;
#else
    protected static optional final (DataWatcher.Key<Byte>) DataWatcherObject<Byte> DATA_LIVING_FLAGS:???;
    public static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_HEALTH:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_PARTICLES_TIMER:???;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_PARTICLES_HIDDEN:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_ARROWCOUNT:???;
#endif

    <code>
    public static final Key<Byte> DATA_LIVING_FLAGS = Key.Type.BYTE.createKey(T.DATA_LIVING_FLAGS, -1);
    public static final Key<Float> DATA_HEALTH = Key.Type.FLOAT.createKey(T.DATA_HEALTH, 6);
    public static final Key<Integer> DATA_PARTICLES_TIMER = Key.Type.INTEGER.createKey(T.DATA_PARTICLES_TIMER, 7);
    public static final Key<Boolean> DATA_PARTICLES_HIDDEN = Key.Type.BOOLEAN.createKey(T.DATA_PARTICLES_HIDDEN, 8);
    public static final Key<Integer> DATA_UNKNOWN1 = Key.Type.INTEGER.createKey(T.DATA_ARROWCOUNT, 9);
    </code>


#if version >= 1.11
    private (AttributeMapServerHandle) AttributeMapBase attributeMapField:attributeMap;
#elseif version >= 1.10.2
    private (AttributeMapServerHandle) AttributeMapBase attributeMapField:br;
#elseif version >= 1.9.4
    private (AttributeMapServerHandle) AttributeMapBase attributeMapField:bq;
#elseif version >= 1.9
    private (AttributeMapServerHandle) AttributeMapBase attributeMapField:bp;
#else
    private (AttributeMapServerHandle) AttributeMapBase attributeMapField:c;
#endif

#if version >= 1.9
    public final (Map<MobEffectListHandle, MobEffectHandle>) Map<MobEffectList, MobEffect> mobEffects:effects;
#else
    public final (Map<MobEffectListHandle, MobEffectHandle>) Map<Integer, MobEffect> mobEffects:effects;
#endif

    public float lastDamage;
#if version >= 1.11
    protected unknown boolean bd;
    public unknown float be;
    public float forwardMovement:bf;
    public unknown float bg;
#elseif version >= 1.10.2
    protected unknown boolean be;
    public unknown float bf;
    public float forwardMovement:bg;
    public unknown float bh;
#elseif version >= 1.9.4
    protected unknown boolean bd;
    public unknown float be;
    public float forwardMovement:bf;
    public unknown float bg;
#elseif version >= 1.9
    protected unknown boolean bc;
    public unknown float bd;
    public float forwardMovement:be;
    public unknown float bf;
#else
    protected unknown boolean aY;
    public unknown float aZ;
    public float forwardMovement:ba;
    protected unknown float bb;
#endif

    public boolean updateEffects;

    public (Collection<MobEffectHandle>) Collection<MobEffect> getEffects();

#if version >= 1.9
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getEquipment((org.bukkit.inventory.EquipmentSlot) EnumItemSlot paramEnumItemSlot);
#else
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getEquipment((org.bukkit.inventory.EquipmentSlot) int paramEnumItemSlot);
#endif

    protected void resetAttributes:initAttributes();

    public (AttributeMapServerHandle) AttributeMapBase getAttributeMap();

    public (AttributeInstanceHandle) AttributeInstance getAttributeInstance((Object) IAttribute iattribute);

    public final float getHealth();

    public final float getMaxHealth();

    <code>
    public static EntityLivingHandle fromBukkit(org.bukkit.entity.LivingEntity livingEntity) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toEntityHandle(livingEntity));
    }
    </code>
}

class EntityHuman extends EntityLiving {
    public (Object) PlayerInventory inventoryRaw:inventory;
#if version >= 1.12
    protected (Object) InventoryEnderChest enderChestRaw:enderChest;
#else
    private (Object) InventoryEnderChest enderChestRaw:enderChest;
#endif
    public unknown Container defaultContainer;
    public (ContainerHandle) Container activeContainer;
    protected (Object) FoodMetaData foodDataRaw:foodData;

    public boolean sleeping;
#if version >= 1.9
    public (IntVector3) BlockPosition bedPosition;
#else
    public (IntVector3) BlockPosition bedPosition:bx;
#endif
    public int sleepTicks;

#if version >= 1.12
    public unknown float bM;
    public unknown float bN;
    private (IntVector3) BlockPosition spawnCoord:d;
    private boolean spawnForced:e;
#elseif version >= 1.11
    public unknown float bI;
    public unknown float bJ;
    private (IntVector3) BlockPosition spawnCoord:e;
    private boolean spawnForced:f;
    private unknown BlockPosition g;
#elseif version >= 1.10.2
    public unknown float bJ;
    public unknown float bK;
    private (IntVector3) BlockPosition spawnCoord:e;
    private boolean spawnForced:f;
    private unknown BlockPosition g;
#elseif version >= 1.9.4
    public unknown float bI;
    public unknown float bJ;
    private (IntVector3) BlockPosition spawnCoord:e;
    private boolean spawnForced:f;
    private unknown BlockPosition g;    
#elseif version >= 1.9
    public unknown float bH;
    public unknown float bI;
    private (IntVector3) BlockPosition spawnCoord:e;
    private boolean spawnForced:f;
    private unknown BlockPosition g;
#else
    public unknown float by;
    public unknown float bz;
    private (IntVector3) BlockPosition spawnCoord:c;
    private boolean spawnForced:d;
    private unknown BlockPosition e;
#endif

    public (com.bergerkiller.bukkit.common.wrappers.PlayerAbilities) PlayerAbilities abilities;
    public int expLevel;
    public int expTotal;
    public float exp;
#if version >= 1.12
    protected unknown int bS;
    protected unknown float bT = 0.02F;
    private unknown int f;
    private final com.mojang.authlib.GameProfile gameProfile:g;
#elseif version >= 1.11
    private unknown int h;
    protected unknown float bO;
    protected unknown float bP;
    private unknown int bR;
    private final com.mojang.authlib.GameProfile gameProfile:bS;
#elseif version >= 1.10.2
    private unknown int h;
    protected unknown float bP;
    protected unknown float bQ;
    private unknown int bS;
    private final com.mojang.authlib.GameProfile gameProfile:bT;
#elseif version >= 1.9.4
    private unknown int h;
    protected unknown float bO;
    protected unknown float bP;
    private unknown int bR;
    private final com.mojang.authlib.GameProfile gameProfile:bS;
#elseif version >= 1.9
    private unknown int h;
    protected unknown float bN;
    protected unknown float bO;
    private unknown int bQ;
    private final com.mojang.authlib.GameProfile gameProfile:bR;
#else
    private unknown int f;
    private unknown ItemStack g;
    private unknown int h;
    protected unknown float bE;
    protected unknown float bF;
    private unknown int i;
    private final com.mojang.authlib.GameProfile gameProfile:bH;
#endif

    public String spawnWorld;
}

class EntityPlayer extends EntityHuman {
    public (Object) PlayerConnection playerConnection;
    public double chunkSyncX:d;
    public double chunkSyncZ:e;
    public final optional List<Integer> removeQueue;
    public int ping;
}

class EntityInsentient extends EntityLiving {
    public (EntityHandle) Entity getLeashHolder();

    public (Object) NavigationAbstract getNavigation();
}

class EntityItem extends Entity {
    private int age;
    public int pickupDelay;

    public (EntityItemHandle) EntityItem((WorldHandle) World world, double x, double y, double z, (ItemStackHandle) ItemStack itemstack);

    public (ItemStackHandle) ItemStack getItemStack();

    public void setItemStack((ItemStackHandle) ItemStack itemstack);
}

class EntityHanging extends Entity {
    public (IntVector3) BlockPosition blockPosition;
}

class EntityMinecartAbstract extends Entity {
#if version >= 1.9
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_SHAKING_FACTOR:a;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_SHAKING_DIRECTION:b;
    private static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_SHAKING_DAMAGE:c;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_BLOCK_TYPE:d;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_BLOCK_OFFSET:e;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_BLOCK_VISIBLE:f;
#else
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_SHAKING_FACTOR:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_SHAKING_DIRECTION:???;
    private static optional final (DataWatcher.Key<Float>) DataWatcherObject<Float> DATA_SHAKING_DAMAGE:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_BLOCK_TYPE:???;
    private static optional final (DataWatcher.Key<Integer>) DataWatcherObject<Integer> DATA_BLOCK_OFFSET:???;
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_BLOCK_VISIBLE:???;
#endif

    <code>
    public static final Key<Integer> DATA_SHAKING_FACTOR = Key.Type.INTEGER.createKey(T.DATA_SHAKING_FACTOR, 17);
    public static final Key<Integer> DATA_SHAKING_DIRECTION = Key.Type.INTEGER.createKey(T.DATA_SHAKING_DIRECTION, 18);
    public static final Key<Float> DATA_SHAKING_DAMAGE = Key.Type.FLOAT.createKey(T.DATA_SHAKING_DAMAGE, 19);
    public static final Key<Integer> DATA_BLOCK_TYPE = Key.Type.INTEGER.createKey(T.DATA_BLOCK_TYPE, 20);
    public static final Key<Integer> DATA_BLOCK_OFFSET = Key.Type.INTEGER.createKey(T.DATA_BLOCK_OFFSET, 21);
    public static final Key<Boolean> DATA_BLOCK_VISIBLE = Key.Type.BOOLEAN.createKey(T.DATA_BLOCK_VISIBLE, 22);
    </code>

    public float getDamage();
    public void setDamage(float damage);
    public int getType();
    public void activate:a(int x, int y, int z, boolean active);
}

class EntityMinecartRideable extends EntityMinecartAbstract {

}

class EntityMinecartFurnace extends EntityMinecartAbstract {
#if version >= 1.9
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_SMOKING:c;
#else
    private static optional final (DataWatcher.Key<Boolean>) DataWatcherObject<Boolean> DATA_SMOKING:???;
#endif

    <code>
    public static final Key<Boolean> DATA_SMOKING = Key.Type.BOOLEAN.createKey(T.DATA_SMOKING, 16);
    </code>

#if version >= 1.9
    private int fuel:d;
#else
    private int fuel:c;
#endif

    public double pushForceX:a;
    public double pushForceZ:b;
}

class EntityMinecartHopper extends EntityMinecartAbstract {
    private int suckingCooldown:b;

#if version >= 1.12
    public boolean suckItems:H();
#elseif version >= 1.9
    public boolean suckItems:I();
#else
    public boolean suckItems:D();
#endif

#if version >= 1.9.4
    public boolean isSuckingEnabled:isEnabled();
    public void setSuckingEnabled:setEnabled(boolean enabled);
#elseif version >= 1.9
    public boolean isSuckingEnabled:C();
    public void setSuckingEnabled:k(boolean enabled);
#else
    public boolean isSuckingEnabled:y();
    public void setSuckingEnabled:i(boolean enabled);
#endif
}

class EntityMinecartTNT extends EntityMinecartAbstract {
    private int fuse:a;

#if version >= 1.9
    protected void explode:c(double damage);
#else
    protected void explode:b(double damage);
#endif

    public void prime:j();
}

class EntityMinecartCommandBlock extends EntityMinecartAbstract {
#if version >= 1.9
    // DataWatcherObject constants are available
    #if version >= 1.11
        public static optional final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_COMMAND:COMMAND;
    #else
        public static optional final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_COMMAND:a;
    #endif
    private static optional final (DataWatcher.Key<Object>) DataWatcherObject<IChatBaseComponent> DATA_PREVIOUS_OUTPUT:b;
#else
    // Int keys are used on MC 1.8.8
    public static optional final (DataWatcher.Key<String>) DataWatcherObject<String> DATA_COMMAND:???;
    private static optional final (DataWatcher.Key<Object>) DataWatcherObject<IChatBaseComponent> DATA_PREVIOUS_OUTPUT:???;
#endif
    <code>
    public static final Key<String> DATA_COMMAND = Key.Type.STRING.createKey(T.DATA_COMMAND, 23);
    public static final Key<com.bergerkiller.bukkit.common.wrappers.ChatText> DATA_PREVIOUS_OUTPUT = Key.Type.CHAT_TEXT.createKey(T.DATA_PREVIOUS_OUTPUT, 24);
    </code>
}

class EntityItemFrame extends Entity {
#if version >= 1.9
    public static optional final (DataWatcher.Key<Object>) DataWatcherObject<ItemStack> DATA_ITEM:c;
#else
    public static optional final (DataWatcher.Key<Object>) DataWatcherObject<ItemStack> DATA_ITEM:???;
#endif

    <code>
    public static final Key<org.bukkit.inventory.ItemStack> DATA_ITEM = Key.Type.ITEMSTACK.createKey(T.DATA_ITEM, 8);
    </code>

    public (org.bukkit.inventory.ItemStack) ItemStack getItem();

    public void setItem((org.bukkit.inventory.ItemStack) ItemStack newItemStack);

    <code>
    public static EntityItemFrameHandle fromBukkit(org.bukkit.entity.ItemFrame itemFrame) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toEntityHandle(itemFrame));
    }
    </code>
}