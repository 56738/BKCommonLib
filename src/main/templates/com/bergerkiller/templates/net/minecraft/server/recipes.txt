package net.minecraft.server;

import com.bergerkiller.bukkit.common.inventory.CraftInputSlot;

import com.bergerkiller.generated.net.minecraft.server.RegistryMaterialsHandle;
import com.bergerkiller.generated.net.minecraft.server.CraftingManagerHandle;
import com.bergerkiller.generated.net.minecraft.server.RecipesFurnaceHandle;
import com.bergerkiller.generated.net.minecraft.server.IRecipeHandle;
import com.bergerkiller.generated.net.minecraft.server.ItemStackHandle;

#if version >= 1.12

class IRecipe {
#if version >= 1.15
    public (org.bukkit.inventory.ItemStack) ItemStack getOutput() {
        if (instance instanceof RecipeFireworks) {
            // Special case (see getIngredients code)
            net.minecraft.server.ItemStack itemstack = new ItemStack(net.minecraft.server.Items.FIREWORK_ROCKET, 3);
            net.minecraft.nbt.NBTTagCompound nbttagcompound = itemstack.a("Fireworks");
            nbttagcompound.setByte("Flight", (byte) 3);
            return itemstack;
        } else {
            return instance.getResult();
        }
    }
#elseif version >= 1.14
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getOutput:c();
#elseif version >= 1.13
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getOutput:d();
#else
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getOutput:b();
#endif

    public abstract (List<CraftInputSlot>) NonNullList<RecipeItemStack> getIngredients() {
        if (instance instanceof ShapedRecipes) {
            ShapedRecipes s = (ShapedRecipes) instance;
#select version >=
#case 1.14:     return s.a();
#case 1.13:     return s.e();
#case 1.12.1:   return s.d();
#case else:     #require net.minecraft.server.ShapedRecipes private final NonNullList<RecipeItemStack> items;
                return instance#items;
#endselect
        } else if (instance instanceof ShapelessRecipes) {
            ShapelessRecipes s = (ShapelessRecipes) instance;
#select version >=
#case 1.14:     return s.a();
#case 1.13:     return s.e();
#case 1.12.1:   return s.d();
#case else:     #require net.minecraft.server.ShapelessRecipes private final NonNullList<RecipeItemStack> ingredients;
                return instance#ingredients;
#endselect

#if version >= 1.15
        } else if (instance instanceof RecipeFireworks) {
            // Fireworks are a 'complex' recipe with many possible options
            // To sort of work properly rather than not at all, default to
            // crafting a flight 3 firework:
            // Shapeless(1 paper + 3 gunpowder) -> Flight 3 firework
            Object[] ingredients = new Object[4];
            ingredients[0] = net.minecraft.server.RecipeItemStack.a(new net.minecraft.server.Item[] { net.minecraft.server.Items.PAPER });
            ingredients[1] = net.minecraft.server.RecipeItemStack.a(new net.minecraft.server.Item[] { net.minecraft.server.Items.GUNPOWDER });
            ingredients[2] = ingredients[1];
            ingredients[3] = ingredients[1];
            return NonNullList.a((Object) RecipeItemStack.a, ingredients);
#endif

        } else {
            return null;
        }
    }
}

#else

interface IRecipe {
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getOutput:b();
    public abstract (List<CraftInputSlot>) List<ItemStack> getIngredients();
}

#endif

// >= MC 1.12
optional class RecipeItemStack {
    public final optional (List<org.bukkit.inventory.ItemStack>) ItemStack[] choices;

    public (List<org.bukkit.inventory.ItemStack>) ItemStack[] getChoices() {
#if version >= 1.13
        instance.buildChoices();
#endif
        return instance.choices;
    }

    <code>
    public static Object createRawRecipeItemStack(List<org.bukkit.inventory.ItemStack> choices) {
        Object raw = T.newInstanceNull();
        T.choices.set(raw, choices);
        return raw;
    }
    </code>
}

// <= MC 1.12.2
optional class RecipesFurnace {
    public (Map<org.bukkit.inventory.ItemStack, org.bukkit.inventory.ItemStack>) Map<ItemStack, ItemStack> recipes;

    public static (RecipesFurnaceHandle) RecipesFurnace getInstance();

    public (ItemStackHandle) ItemStack getResult((ItemStackHandle) ItemStack itemstack);

}

// >= MC 1.13
optional class FurnaceRecipe extends IRecipe {
    public (CraftInputSlot) RecipeItemStack getIngredient() {
#if version >= 1.14
        #require net.minecraft.server.RecipeCooking protected final RecipeItemStack ingredient;
#elseif version >= 1.13
        #require net.minecraft.server.FurnaceRecipe private final RecipeItemStack ingredient;
#endif
        return instance#ingredient;
    }

    public static (Iterable<com.bergerkiller.generated.net.minecraft.server.FurnaceRecipeHandle>) Iterable<FurnaceRecipe> getRecipes() {
        java.util.Iterator allRecipes = MinecraftServer.getServer().getCraftingManager().b().iterator();
        java.util.List filteredResult = new java.util.ArrayList();
        while (allRecipes.hasNext()) {
            Object recipe = allRecipes.next();
            if (recipe instanceof FurnaceRecipe) {
                filteredResult.add(recipe);
            }
        }
        return filteredResult;
    }
}

class CraftingManager {
    public static (Iterable<com.bergerkiller.generated.net.minecraft.server.IRecipeHandle>) Iterable<IRecipe> getRecipes() {
#if version >= 1.13
        java.util.Iterator allRecipes = MinecraftServer.getServer().getCraftingManager().b().iterator();
        java.util.List filteredResult = new java.util.ArrayList();
        while (allRecipes.hasNext()) {
            Object recipe = allRecipes.next();
            if (recipe instanceof FurnaceRecipe) {
                continue;
            }
            filteredResult.add(recipe);
        }
        return filteredResult;
#elseif version >= 1.12
        return CraftingManager.recipes;
#else
        return CraftingManager.getInstance().recipes;
#endif
    }
}
