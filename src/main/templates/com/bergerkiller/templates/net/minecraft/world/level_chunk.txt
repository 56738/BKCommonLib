package net.minecraft.world.level.chunk;

import net.minecraft.server.level.WorldServer;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.level.chunk.ChunkSection;
import net.minecraft.world.level.EnumSkyBlock;
import net.minecraft.world.level.levelgen.HeightMap;
import net.minecraft.world.level.World;

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.bases.IntVector3;

import com.bergerkiller.generated.net.minecraft.world.entity.EntityHandle;
import com.bergerkiller.generated.net.minecraft.world.level.chunk.ChunkHandle;
import com.bergerkiller.generated.net.minecraft.world.level.EnumSkyBlockHandle;

import com.bergerkiller.generated.net.minecraft.world.level.WorldHandle;

import io.github.opencubicchunks.cubicchunks.api.world.ICubicWorld;
import io.github.opencubicchunks.cubicchunks.api.world.ICube;
import io.github.opencubicchunks.cubicchunks.api.world.ICubeProviderServer;

class Chunk {
#if version >= 1.16
    public final (WorldHandle) WorldServer world;
#else
    public final (WorldHandle) World world;
#endif

#if version >= 1.14
    public int getLocX() {
        return instance.getPos().x;
    }

    public int getLocZ() {
        return instance.getPos().z;
    }
#else
    public int getLocX() {
        return instance.locX;
    }

    public int getLocZ() {
        return instance.locZ;
    }
#endif

    public java.util.List<Integer> getLoadedSectionCoordinates() {
#if exists io.github.opencubicchunks.cubicchunks.api.world.ICube
        World world = instance.getWorld();
        if (world instanceof ICubicWorld && ((ICubicWorld) world).isCubicWorld()) {
            java.util.ArrayList result = new java.util.ArrayList();
            java.util.Iterator cubes_iter = instance.getLoadedCubes().iterator();
            while (cubes_iter.hasNext()) {
                result.add(Integer.valueOf(((ICube) cubes_iter.next()).getY()));
            }
            return result;
        }
#endif

        java.util.ArrayList result = new java.util.ArrayList();
        ChunkSection[] sections = instance.getSections();
        for (int y = 0; y < sections.length; y++) {
            if (sections[y] != null) {
                result.add(Integer.valueOf(y));
            }
        }
        return result;
    }

    public (com.bergerkiller.bukkit.common.wrappers.ChunkSection[]) ChunkSection[] getSections() {
#if exists io.github.opencubicchunks.cubicchunks.api.world.ICube
        World world = instance.getWorld();
        if (world instanceof ICubicWorld && ((ICubicWorld) world).isCubicWorld()) {
            ChunkSection[] sections = new ChunkSection[16];
            for (int cy = 0; cy < 16; cy++) {
                sections[cy] = instance.getCube(cy).getStorage();
            }
            return sections;
        }
#endif

        return instance.getSections();
    }

    public (com.bergerkiller.bukkit.common.wrappers.ChunkSection) ChunkSection getSection(int cy) {
#if exists io.github.opencubicchunks.cubicchunks.api.world.ICube
        World world = instance.getWorld();
        if (world instanceof ICubicWorld && ((ICubicWorld) world).isCubicWorld()) {
            ICubeProviderServer provider = (ICubeProviderServer) ((ICubicWorld) world).getCubeCache();
            ICube cube = provider.getCube(instance.locX, cy, instance.locZ, ICubeProviderServer.Requirement.LOAD);
            if (cube != null) {
                return cube.getStorage();
            } else {
                return null;
            }
        }
#endif

        ChunkSection[] sections = instance.getSections();
        if (cy >= 0 && cy < sections.length) {
            return sections[cy];
        } else {
            return null;
        }
    }

    public java.util.Collection<?> getRawTileEntities() {
        return instance.tileEntities.values();
    }

    public java.util.Collection<org.bukkit.block.BlockState> getTileEntities() {
        java.util.Collection tileEntities = instance.tileEntities.values();
        com.bergerkiller.bukkit.common.conversion.blockstate.ChunkBlockStateConverter chunkBlockStateConverter;
        chunkBlockStateConverter = new com.bergerkiller.bukkit.common.conversion.blockstate.ChunkBlockStateConverter(instance.bukkitChunk);
        return new com.bergerkiller.mountiplex.conversion.util.ConvertingCollection(tileEntities, chunkBlockStateConverter);
    }

#if exists net.minecraft.world.level.chunk.Chunk public final net.minecraft.util.EntitySlice<net.minecraft.world.entity.Entity>[] entitySlices;
    public final (List<Object>[]) net.minecraft.util.EntitySlice<Entity>[] entitySlices;
#else
    public final (List<Object>[]) List<Entity>[] entitySlices;
#endif
    public org.bukkit.Chunk bukkitChunk;

#if version >= 1.13
    public (BlockData) IBlockData getBlockData:getType((IntVector3) BlockPosition blockposition);
#else
    public (BlockData) IBlockData getBlockData((IntVector3) BlockPosition blockposition);
#endif

#if version >= 1.16
    public (BlockData) IBlockData getBlockDataAtCoord(int x, int y, int z) {
        return instance.getType(new BlockPosition(x, y, z));
    }
#elseif version >= 1.14
    public (BlockData) IBlockData getBlockDataAtCoord(int x, int y, int z) {
        BlockPosition$PooledBlockPosition blockPos = BlockPosition$PooledBlockPosition.f(x, y, z);
        try {
            return instance.getType((BlockPosition) blockPos);
        } finally {
            blockPos.close();
        }
    }
#elseif version >= 1.13
    public (BlockData) IBlockData getBlockDataAtCoord:getBlockData(int x, int y, int z);
#elseif version >= 1.9
    public (BlockData) IBlockData getBlockDataAtCoord:a(int x, int y, int z);
#else
    // Fallback on 1.8.8: generated code
    public (BlockData) IBlockData getBlockDataAtCoord(int x, int y, int z) {
        return instance.getBlockData(new BlockPosition(x, y, z));
    }
#endif

    // Since MC 1.13 updateFlags are used (See World.java setTypeAndData)
    public (BlockData) IBlockData setBlockData((IntVector3) BlockPosition blockposition, (BlockData) IBlockData iblockdata, int updateFlags) {
#if version >= 1.13.2
        return instance.setType(blockposition, iblockdata, (updateFlags & 64) != 0);
#elseif version >= 1.13
        return instance.a(blockposition, iblockdata, (updateFlags & 64) != 0);
#else
        return instance.a(blockposition, iblockdata);
#endif
    }

    public void addEntity:a((EntityHandle) Entity entity);

#if version >= 1.14
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getLightHeightMap(boolean initialize) {
        // Note: must always initialize, since the server does not store this data
        HeightMap heightMap = new HeightMap(instance, HeightMap$Type.values()[0]);
        com.bergerkiller.generated.net.minecraft.world.level.levelgen.HeightMapHandle.T.initialize.invoke(heightMap);
        return heightMap;
    }
#elseif version >= 1.13
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getLightHeightMap(boolean initialize) {
        HeightMap heightMap = instance.b(HeightMap$Type.LIGHT_BLOCKING);
        if (initialize) {
            heightMap.a();
        }
        return heightMap;
    }
#else
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getLightHeightMap(boolean initialize) {
        HeightMap heightMap = new com.bergerkiller.bukkit.common.internal.proxy.HeightMapProxy_1_12_2(instance, instance.heightMap);
        if (initialize) {
             com.bergerkiller.generated.net.minecraft.world.level.levelgen.HeightMapHandle.T.initialize.invoke(heightMap);
        }
        return heightMap;
    }
#endif

#if version >= 1.14
    public int getBrightness((EnumSkyBlockHandle) EnumSkyBlock enumskyblock, (IntVector3) BlockPosition position) {
        return instance.world.getBrightness(enumskyblock, position);
    }
#else
    public int getBrightness((EnumSkyBlockHandle) EnumSkyBlock enumskyblock, (IntVector3) BlockPosition position);
#endif

#if version >= 1.13
    public int getTopSliceY:b();
#else
    public int getTopSliceY:g();
#endif

    // MC 1.13: byte[] -> BiomeBase[] -> (1.16.2) BiomeSettingsMobs[]
    // public byte[] getBiomeIndex();

    public void addEntities();

#if version >= 1.14
    public boolean checkCanSave:c(boolean isNotAutosave) {
        return instance.isNeedsSaving();
    }
#elseif version >= 1.13
    public boolean checkCanSave:c(boolean isNotAutosave);
#else
    public boolean checkCanSave:a(boolean isNotAutosave);
#endif

#if version >= 1.12
    public void markDirty();
#else
    public void markDirty:e();
#endif

    // this.someField = true in a(Entity) when entity is added
    // There is an accessor method which does the same, call that
    public void markEntitiesDirty() {
#if version >= 1.14
        instance.d(true);
#elseif version >= 1.13
        instance.f(true);
#else
        instance.g(true);
#endif
    }

    <code>
    public static ChunkHandle fromBukkit(org.bukkit.Chunk chunk) {
        if (chunk != null) {
            return createHandle(com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toChunkHandle(chunk));
        } else {
            return null;
        }
    }
    </code>
}
