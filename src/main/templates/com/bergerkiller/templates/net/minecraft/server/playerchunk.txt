package net.minecraft.server;

import com.bergerkiller.bukkit.common.bases.IntVector2;
import com.bergerkiller.bukkit.common.bases.IntVector3;

import com.bergerkiller.generated.net.minecraft.server.PlayerChunkMapHandle;
import com.bergerkiller.generated.net.minecraft.server.PlayerChunkHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityPlayerHandle;

class PlayerChunk {

public (PlayerChunkMapHandle) PlayerChunkMap getPlayerChunkMap() {
#if version >= 1.14
    return (PlayerChunkMap) instance.players;
#elseif version >= 1.9
    #require net.minecraft.server.PlayerChunk private final PlayerChunkMap playerChunkMap;
    return instance#playerChunkMap;
#elseif version >= 1.8.3
    #require net.minecraft.server.PlayerChunk private final PlayerChunkMap playerChunkMap:this$0;
    return instance#playerChunkMap;
#else
    #require net.minecraft.server.PlayerChunk final PlayerChunkMap playerChunkMap;
    return instance#playerChunkMap;
#endif
}

#if version >= 1.14
    public void markAllLightDirty() {
    
  #if version >= 1.16
        #require net.minecraft.server.PlayerChunk private int pc_dirtyBlockLightMask:s;
        #require net.minecraft.server.PlayerChunk private int pc_dirtySkyLightMask:t;
  #elseif version >= 1.14.1
        #require net.minecraft.server.PlayerChunk private int pc_dirtyBlockLightMask:t;
        #require net.minecraft.server.PlayerChunk private int pc_dirtySkyLightMask:u;
  #else
        #require net.minecraft.server.PlayerChunk private int pc_dirtyBlockLightMask:s;
        #require net.minecraft.server.PlayerChunk private int pc_dirtySkyLightMask:t;
  #endif

        // Set all these masks to 'all layers' (18) to refresh them
        instance#pc_dirtyBlockLightMask = 0x3FFFF;
        instance#pc_dirtySkyLightMask = 0x3FFFF;

        // Only used before MC 1.16
  #if version < 1.16
    #if version >= 1.14.1
        #require net.minecraft.server.PlayerChunk private int pc_layerLightMask:s;
    #else
        #require net.minecraft.server.PlayerChunk private int pc_layerLightMask:r;
    #endif
        instance#pc_layerLightMask = 0x3FFFF;
  #endif

        // Update now
        Chunk chunk = instance.getChunk();
        if (chunk != null) {
            instance.a(chunk);
        }
    }
#else
    public void markAllLightDirty() {
        // Unavailable < 1.14
    }
#endif

#if version >= 1.14.3
    public (List<org.bukkit.entity.Player>) List<EntityPlayer> getPlayers() {
        return instance.players.a(instance.i(), false).collect(java.util.stream.Collectors.toList());
    }
#elseif version >= 1.14
    public (List<org.bukkit.entity.Player>) List<EntityPlayer> getPlayers() {
        return instance.players.a(instance.h(), false).collect(java.util.stream.Collectors.toList());
    }
#else
    public (List<org.bukkit.entity.Player>) List<EntityPlayer> getPlayers() {
        // Require the player list field
#if version >= 1.9
  #if fieldexists net.minecraft.server.PlayerChunk public final List<EntityPlayer> players
        #require net.minecraft.server.PlayerChunk public final List<EntityPlayer> pc_playersField:players;
  #else
        #require net.minecraft.server.PlayerChunk public final List<EntityPlayer> pc_playersField:c;
  #endif
#else
        #require net.minecraft.server.PlayerChunk private final List<EntityPlayer> pc_playersField:b;
#endif
        return instance#pc_playersField;
    }
#endif

    private final (IntVector2) ChunkCoordIntPair location;

#if version >= 1.14.1
    private int dirtyCount;
    private int dirtySectionMask:r;
    public unknown final PlayerChunk.d players;
    private boolean done:hasBeenLoaded;
#elseif version >= 1.14
    private int dirtyCount;
    private int dirtySectionMask:q;
    public unknown final PlayerChunk.d players;
    private boolean done:x;
#elseif version >= 1.9
    private int dirtyCount;
    private int dirtySectionMask:h;
    private boolean done;
#elseif version >= 1.8.3
    private unknown short[] dirtyBlocks;
    private int dirtyCount;
    private int dirtySectionMask:f;
    private boolean done:loaded;
#else
    private unknown short[] dirtyBlocks;
    private int dirtyCount;
    private int dirtySectionMask:f;
    private boolean done:loaded;
#endif

    // Moved to PlayerChunkMap in 1.14
    //     public void addPlayer:a((org.bukkit.entity.Player) EntityPlayer player);
    //     public void removePlayer:b((org.bukkit.entity.Player) EntityPlayer player);

    // #if version >= 1.9
    //     public void sendChunk((org.bukkit.entity.Player) EntityPlayer player);
    // #else
    //     public void sendChunk:b((org.bukkit.entity.Player) EntityPlayer player);
    // #endif

// Only used on 1.14 and onwards to patch up chunks that have unloaded
#if version >= 1.14
    public optional (org.bukkit.Chunk) Chunk opt_getChunkTryHard_1_14() {
        #require net.minecraft.server.PlayerChunk private static final java.util.List<net.minecraft.server.ChunkStatus> CHUNK_STATUSES;
        java.util.List chunk_statuses = PlayerChunk#CHUNK_STATUSES;
        for (int i = chunk_statuses.size() - 1; i >= 0; --i) {
            java.util.concurrent.CompletableFuture future;
  #if version >= 1.14.1
            future = instance.getStatusFutureUnchecked((ChunkStatus) chunk_statuses.get(i));
  #else
            future = instance.a((ChunkStatus) chunk_statuses.get(i));
  #endif
            if (!future.isCompletedExceptionally()) {
                com.mojang.datafixers.util.Either either = (com.mojang.datafixers.util.Either) future.getNow(null);
                if (either != null) {
                    java.util.Optional chunkOpt = either.left();
                    if (chunkOpt != null) {
                        return (Chunk) chunkOpt.get();
                    }
                }
            }
        }
        return null;
    }
#else
    public optional (org.bukkit.Chunk) Chunk opt_getChunkTryHard_1_14:###();
#endif

#if version >= 1.14
    public (org.bukkit.Chunk) Chunk getChunkIfLoaded:getChunk();
#elseif version >= 1.9
    public (org.bukkit.Chunk) Chunk getChunkIfLoaded() {
        return instance.chunk;
    }
#elseif version >= 1.8
    #require net.minecraft.server.PlayerChunk private final ChunkCoordIntPair location;
    #require net.minecraft.server.PlayerChunk private boolean loaded;
    #if version >= 1.8.3
        #require net.minecraft.server.PlayerChunk private final PlayerChunkMap playerChunkMap:this$0;
    #else
        #require net.minecraft.server.PlayerChunk final PlayerChunkMap playerChunkMap;
    #endif

    public (org.bukkit.Chunk) Chunk getChunkIfLoaded() {
        boolean loaded = instance#loaded;
        if (loaded) {
            PlayerChunkMap map = instance#playerChunkMap;
            ChunkCoordIntPair loc = instance#location;
            return map.a().chunkProviderServer.getChunkAt(loc.x, loc.z);
        } else {
            return null;
        }
    }
#endif

}

class PlayerChunkMap {
    //    private final (List<org.bukkit.entity.Player>) List<EntityPlayer> managedPlayers;
    //
    //#if version >= 1.9
    //    private final optional (Queue<PlayerChunkHandle>) Queue<PlayerChunk> updateQueue_1_8_8:###;
    //    private final unknown Set<PlayerChunk> dirtyBlockChunks:f;
    //    private final unknown List<PlayerChunk> g;
    //    private final unknown List<PlayerChunk> h;
    //    private final unknown List<PlayerChunk> i;
    //    private int radius:j;
    //#else
    //    private final optional (Queue<PlayerChunkHandle>) Queue<PlayerChunk> updateQueue_1_8_8:e;
    //    private final unknown Queue<PlayerChunk> f;
    //    private int radius:g;
    //#endif

    //#if version >= 1.9
    //    public optional void markForUpdate_1_10_2:a((PlayerChunkHandle) PlayerChunk playerchunk);
    //#else
    //    public optional void markForUpdate_1_10_2:###((PlayerChunkHandle) PlayerChunk playerchunk);
    //#endif
    //    <code>
    //    public void markForUpdate(PlayerChunkHandle playerChunk) {
    //        if (T.markForUpdate_1_10_2.isAvailable()) {
    //            T.markForUpdate_1_10_2.invoke(getRaw(), playerChunk);
    //        } else {
    //            T.updateQueue_1_8_8.get(getRaw()).add(playerChunk);
    //        }
    //    }
    //    </code>
    //
    //    private boolean shouldUnload:a(int i, int j, int k, int l, int i1);

#if version >= 1.14
    public (PlayerChunkHandle) PlayerChunk getVisibleChunk(int x, int z) {
        #require net.minecraft.server.PlayerChunkMap protected (Object) PlayerChunk getVisibleChunk_1_14:getVisibleChunk(long i);
        return (PlayerChunk) instance#getVisibleChunk_1_14(ChunkCoordIntPair.pair(x, z));
    }
    public (PlayerChunkHandle) PlayerChunk getUpdatingChunk(int x, int z) {
        #require net.minecraft.server.PlayerChunkMap protected (Object) PlayerChunk getUpdatingChunk_1_14:getUpdatingChunk(long i);
        return (PlayerChunk) instance#getUpdatingChunk_1_14(ChunkCoordIntPair.pair(x, z));
    }
#elseif version >= 1.9.4
    public (PlayerChunkHandle) PlayerChunk getVisibleChunk:getChunk(int x, int z);
    public (PlayerChunkHandle) PlayerChunk getUpdatingChunk:getChunk(int x, int z);
#elseif version >= 1.9
    public (PlayerChunkHandle) PlayerChunk getVisibleChunk:b(int x, int z);
    public (PlayerChunkHandle) PlayerChunk getUpdatingChunk:b(int x, int z);
#else
    #require net.minecraft.server.PlayerChunkMap private (Object) PlayerChunk getChunk_1_8_8:a(int x, int z, boolean create);
    public (PlayerChunkHandle) PlayerChunk getVisibleChunk(int x, int z) {
        return instance#getChunk_1_8_8(x, z, false);
    }
    public (PlayerChunkHandle) PlayerChunk getUpdatingChunk(int x, int z) {
        return instance#getChunk_1_8_8(x, z, false);
    }
#endif

#if version >= 1.14
    public boolean isChunkEntered((EntityPlayerHandle) EntityPlayer entityplayer, int chunkX, int chunkZ) {
  #if exists net.minecraft.server.PlayerChunkMap public net.minecraft.server.PlayerChunk getVisibleChunk(long key);
        PlayerChunk chunk = instance.getVisibleChunk(ChunkCoordIntPair.pair(chunkX, chunkZ));
  #else
        PlayerChunk chunk = (PlayerChunk) instance.visibleChunks.get(ChunkCoordIntPair.pair(chunkX, chunkZ));
  #endif

        if (chunk == null || chunk.getChunk() == null) {
            return false;
        }

        // Check Stream contains Player
        ChunkCoordIntPair chunkCoordinates = new ChunkCoordIntPair(chunkX, chunkZ);
        java.util.stream.Stream players = chunk.players.a(chunkCoordinates, false);
        return players.anyMatch(java.util.function.Predicate.isEqual(entityplayer));
    }
#else
    public boolean isChunkEntered:a((EntityPlayerHandle) EntityPlayer entityplayer, int chunkX, int chunkZ);
#endif

// Needed to make sure the EntityTracker hook works
#if version >= 1.14
    protected optional void trackEntity:addEntity((org.bukkit.entity.Entity) Entity entity);
#else
    protected optional void trackEntity:###((org.bukkit.entity.Entity) Entity entity);
#endif

}