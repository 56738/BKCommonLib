package net.minecraft.core;

import net.minecraft.resources.MinecraftKey;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.item.Item;

// Only available >= MC 1.9
optional class RegistryBlockID {
    public int getId(T value);
}

class RegistryMaterials {
#if version >= 1.13
    protected optional final Map<V, K> opt_inverseLookupField:###;
#else
    protected optional final Map<V, K> opt_inverseLookupField:b;
#endif

#if version >= 1.13.1
    public V get((Object) MinecraftKey key);
    public (Object) MinecraftKey getKey(V value);
#elseif version >= 1.9
    public V get((Object) K key);
    public (Object) K getKey:b(V value);
#else
    public V get((Object) K key);
    public (Object) K getKey:c(V value);
#endif

#if version >= 1.19.3
    public optional Object rawSoundEffectResourceKeyToHolder(Object resourceKey) {
        net.minecraft.resources.ResourceKey resourceKeyCasted = (net.minecraft.resources.ResourceKey) resourceKey;
        java.util.Optional holderOpt = instance.getHolder(resourceKeyCasted);
        if (holderOpt.isPresent()) {
            return holderOpt.get();
        } else {
            return net.minecraft.core.Holder.direct(net.minecraft.sounds.SoundEffect.createVariableRangeEvent(resourceKeyCasted.location()));
        }
    }
#elseif version >= 1.18.2
    public optional Object rawSoundEffectResourceKeyToHolder(Object resourceKey) {
        return instance.getHolderOrThrow((net.minecraft.resources.ResourceKey) resourceKey);
    }
#else
    public optional Object rawSoundEffectResourceKeyToHolder:###(Object resourceKey);
#endif
}

// Since MC 1.14 has static fields
optional class IRegistry {
#if version >= 1.14
    public static Object getWindowTypeByName(String name) {
        if (name == null) return null;
        return BuiltInRegistries.MENU.get(new MinecraftKey(name));
    }
    public static int getWindowTypeId(Object windowTypeRaw) {
        if (windowTypeRaw == null) return -1;
  #if version >= 1.17
        return BuiltInRegistries.MENU.getId(windowTypeRaw);
  #else
        return BuiltInRegistries.MENU.a(windowTypeRaw);
  #endif
    }
#else
    public static Object getWindowTypeByName(String name) {
        return null;
    }
    public static int getWindowTypeId(Object windowTypeRaw) {
        return -1;
    }
#endif
}
