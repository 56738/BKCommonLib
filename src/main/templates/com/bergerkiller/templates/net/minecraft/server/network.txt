package net.minecraft.server;

import com.bergerkiller.bukkit.common.protocol.CommonPacket;

class NetworkManager {
#if version >= 1.8.4
    public io.netty.channel.Channel channel;
#elseif version >= 1.8.3
    public io.netty.channel.Channel channel:k;
#else
    private io.netty.channel.Channel channel:i;
#endif

#if version >= 1.9
    public boolean isConnected();
#else
    public boolean isConnected:g();
#endif

    <code>
    private static final java.lang.reflect.Constructor _queuedPacketConstructor;
    static {
        java.lang.reflect.Constructor c = null;
        try {
            Class<?> queuedPacketType = com.bergerkiller.bukkit.common.utils.CommonUtil.getNMSClass("NetworkManager$QueuedPacket");
            Class<?> listenerType = com.bergerkiller.bukkit.common.utils.CommonUtil.getClass("io.netty.util.concurrent.GenericFutureListener");
            if (queuedPacketType == null) {
                throw new IllegalStateException("Class QueuedPacket does not exist");
            }
            if (listenerType == null) {
                throw new IllegalStateException("Class GenericFutureListener does not exist");
            }
            if (com.bergerkiller.bukkit.common.internal.CommonBootstrap.evaluateMCVersion(">=", "1.13")) {
                c = queuedPacketType.getDeclaredConstructor(PacketHandle.T.getType(), listenerType);
            } else {
                listenerType = com.bergerkiller.bukkit.common.utils.LogicUtil.getArrayType(listenerType);
                c = queuedPacketType.getDeclaredConstructor(PacketHandle.T.getType(), listenerType);
            }
            c.setAccessible(true);
        } catch (Throwable t) {
            t.printStackTrace();
        }
        _queuedPacketConstructor = c;
    }

    public static Object createQueuedPacket(Object packet) {
        try {
            return _queuedPacketConstructor.newInstance(packet, null);
        } catch (Throwable t) {
            throw com.bergerkiller.mountiplex.MountiplexUtil.uncheckedRethrow(t);
        }
    }
    </code>
}

class PlayerConnection {
    public final (Object) NetworkManager networkManager;

#if version >= 1.9
    public void sendPacket((Object) Packet<?> packet);
#else
    public void sendPacket((Object) Packet packet);
#endif

    public void queuePacket(Object packet) {
#if version >= 1.13.2
        #require net.minecraft.server.NetworkManager private final readonly java.util.Queue packetQueue;
#elseif version >= 1.8.3
        #require net.minecraft.server.NetworkManager private final readonly java.util.Queue packetQueue:i;
#else
        #require net.minecraft.server.NetworkManager private final readonly java.util.Queue packetQueue:h;
#endif
        java.util.Queue queue = instance.networkManager#packetQueue;
        Object queuedPacket = com.bergerkiller.generated.net.minecraft.server.NetworkManagerHandle.createQueuedPacket(packet);

#if version >= 1.14.4
        // Uses synchronized
        synchronized (queue) {
            queue.add(queuedPacket);
        }
#elseif version >= 1.8.3
        // Uses ReentrantReadWriteLock
        #require net.minecraft.server.NetworkManager private final java.util.concurrent.locks.ReentrantReadWriteLock packetQueueRWLock:j;
        java.util.concurrent.locks.ReentrantReadWriteLock lock = instance.networkManager#packetQueueRWLock;
        lock.writeLock().lock();
        try {
            queue.add(queuedPacket);
        } finally {
            lock.writeLock().unlock();
        }
#else
        // No lock at all (relies on concurrent queue logic)
        queue.add(queuedPacket);
#endif
    }

    <code>
    public boolean isConnected() {
        return com.bergerkiller.generated.net.minecraft.server.NetworkManagerHandle.T.isConnected.invoke(getNetworkManager()).booleanValue();
    }

    /**
     * Gets the PlayerConnection NMS instance, which is used for sending packets to.
     * If the player is an NPC, or is disconnected, this method returns null.
     * 
     * @param player
     * @return player connection
     */
    public static PlayerConnectionHandle forPlayer(org.bukkit.entity.Player player) {
        Object handle = com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toEntityHandle(player);
        if (!EntityPlayerHandle.T.isType(handle)) return null; // Check not NPC player

        final PlayerConnectionHandle connection = EntityPlayerHandle.T.playerConnection.get(handle);
        if (connection == null || !connection.isConnected()) {
            return null; // No PlayerConnection instance or not connected
        }
        return connection;
    }
    </code>

    public void sendPos(double x, double y, double z) {
        java.util.HashSet flags = new java.util.HashSet();
        flags.add(PacketPlayOutPosition.EnumPlayerTeleportFlags.X_ROT);
        flags.add(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y_ROT);
        instance.sendPacket(new PacketPlayOutPosition(x, y, z, 0.0f, 0.0f, flags, 0));
    }
}