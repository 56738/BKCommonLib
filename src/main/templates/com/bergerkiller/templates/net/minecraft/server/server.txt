package net.minecraft.server;

import com.bergerkiller.bukkit.common.nbt.CommonTagCompound;
import com.bergerkiller.bukkit.common.protocol.CommonPacket;

import com.bergerkiller.generated.net.minecraft.server.MinecraftServerHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldServerHandle;
import com.bergerkiller.generated.net.minecraft.server.LocaleLanguageHandle;
import com.bergerkiller.generated.net.minecraft.server.CrashReportHandle;
import com.bergerkiller.generated.net.minecraft.server.CrashReportSystemDetailsHandle;
import com.bergerkiller.generated.net.minecraft.server.ReportedExceptionHandle;

class MinecraftServer {
    private boolean hasStopped;

    public String getResourcePack();

    public String getResourcePackHash();

    public String getProperty(String key, String defaultValue) {
        DedicatedServer dedicatedServer = (DedicatedServer) instance;
#if version >= 1.14
        return dedicatedServer.getDedicatedServerProperties().properties.getProperty(key, defaultValue);
#else
        return dedicatedServer.getPropertyManager().properties.getProperty(key, defaultValue);
#endif
    }

#select version >=
#case 1.16.4: public int getTicks:ai();
#case 1.16.2: public int getTicks:ah();
#case 1.16:   public int getTicks:ag();
#case 1.15.2: public int getTicks:ak();
#case 1.14.4: public int getTicks:aj();
#case 1.14:   public int getTicks:ai();
#case 1.13.1: public int getTicks:ah();
#case 1.13:   public int getTicks:aj();
#case 1.11:   public int getTicks:aq();
#case 1.9:    public int getTicks:ap();
#case 1.8.4:  public int getTicks:at();
#case 1.8.3:  public int getTicks:as();
#case else:   public int getTicks:ar();
#endselect

#if forge
    public boolean isMainThread() {
        return Thread.currentThread() == com.bergerkiller.bukkit.common.utils.CommonUtil.MAIN_THREAD;
    }
#else
    public boolean isMainThread();
#endif

    <code>
    private static MinecraftServerHandle _cached_instance = null;
    public static MinecraftServerHandle instance() {
        if (_cached_instance == null) {
            _cached_instance = com.bergerkiller.generated.org.bukkit.craftbukkit.CraftServerHandle.instance().getServer();
        }
        return _cached_instance;
    }
    </code>
}

class PlayerList {
    public final (List<org.bukkit.entity.Player) List<EntityPlayer> players;

    protected int maxPlayers;

    public void savePlayers();

    protected void savePlayerFile((org.bukkit.entity.Player) EntityPlayer entityplayer);

#if version >= 1.16
    public void sendRawPacketNearby((org.bukkit.World) net.minecraft.server.WorldServer world, double x, double y, double z, double radius, (Object) Packet<?> packet) {
        instance.sendPacketNearby(null, x, y, z, radius, world.getDimensionKey(), packet);
    }
#elseif version >= 1.14.1
    public void sendRawPacketNearby((org.bukkit.World) net.minecraft.server.WorldServer world, double x, double y, double z, double radius, (Object) Packet<?> packet) {
        instance.sendPacketNearby(null, x, y, z, radius, world.worldProvider.getDimensionManager().getType(), packet);
    }
#elseif version >= 1.9
    public void sendRawPacketNearby((org.bukkit.World) net.minecraft.server.WorldServer world, double x, double y, double z, double radius, (Object) Packet<?> packet) {
        instance.sendPacketNearby(null, x, y, z, radius, world.dimension, packet);
    }
#else
    public void sendRawPacketNearby((org.bukkit.World) net.minecraft.server.WorldServer world, double x, double y, double z, double radius, (Object) Packet packet) {
        instance.sendPacketNearby(null, x, y, z, radius, world.dimension, packet);
    }
#endif
}

class DedicatedPlayerList extends PlayerList {

}

class LocaleLanguage {
#if version >= 1.16
    private static volatile (LocaleLanguageHandle) LocaleLanguage INSTANCE:d;
#else
    private static final (LocaleLanguageHandle) LocaleLanguage INSTANCE:c;
#endif

    public synchronized String get:a(String s);
}

class CrashReport {
    public static (CrashReportHandle) CrashReport create:a(Throwable throwable, String message);

    public (CrashReportSystemDetailsHandle) CrashReportSystemDetails getSystemDetails:a(String message);
}

class CrashReportSystemDetails {

}

class ReportedException {
    public (ReportedExceptionHandle) ReportedException((CrashReportHandle) CrashReport paramCrashReport);
}