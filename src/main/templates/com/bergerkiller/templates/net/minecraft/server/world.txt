package net.minecraft.server;

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.wrappers.Dimension;
import com.bergerkiller.bukkit.common.bases.IntVector3;

import com.bergerkiller.generated.net.minecraft.server.WorldNBTStorageHandle;
import com.bergerkiller.generated.net.minecraft.server.AxisAlignedBBHandle;
import com.bergerkiller.generated.net.minecraft.server.ChunkHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldServerHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldDataHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldTypeHandle;
import com.bergerkiller.generated.net.minecraft.server.BlockPositionHandle;
import com.bergerkiller.generated.net.minecraft.server.PlayerChunkMapHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityPlayerHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHumanHandle;
import com.bergerkiller.generated.net.minecraft.server.MethodProfilerHandle;
import com.bergerkiller.generated.net.minecraft.server.BiomeBaseHandle.BiomeMetaHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldProviderHandle;
import com.bergerkiller.generated.net.minecraft.server.TileEntityHandle;
import com.bergerkiller.generated.net.minecraft.server.ChunkProviderServerHandle;
import com.bergerkiller.generated.net.minecraft.server.BiomeBaseHandle.BiomeMetaHandle;
import com.bergerkiller.generated.net.minecraft.server.MovingObjectPositionHandle;
import com.bergerkiller.generated.net.minecraft.server.RegionFileHandle;
import com.bergerkiller.generated.net.minecraft.server.IWorldAccessHandle;
import com.bergerkiller.generated.net.minecraft.server.MinecraftServerHandle;
import com.bergerkiller.generated.net.minecraft.server.VoxelShapeHandle;
import com.bergerkiller.generated.net.minecraft.server.ForcedChunkHandle
import com.bergerkiller.generated.net.minecraft.server.LightEngineThreadedHandle;

class World extends IBlockAccess {
    public final Random random;
    public (WorldProviderHandle) WorldProvider worldProvider;

    // Only available >= MC 1.9
    protected optional (Object) NavigationListener navigationListener:t;

    protected optional (Object) IChunkProvider field_chunkProvider:chunkProvider;

    public void method_profiler_begin(String label) {
#if version >= 1.14
        instance.getMethodProfiler().enter(label);
#elseif exists net.minecraft.server.MethodProfiler public void enter(String label)
        instance.methodProfiler.enter(label);
#else
        instance.methodProfiler.a(label);
#endif
    }

    public void method_profiler_end() {
#if version >= 1.14
        instance.getMethodProfiler().exit();
#elseif exists net.minecraft.server.MethodProfiler public void exit()
        instance.methodProfiler.exit();
#elseif version >= 1.13
        instance.methodProfiler.e();
#else
        instance.methodProfiler.b();
#endif
    }

    private final (org.bukkit.World) org.bukkit.craftbukkit.CraftWorld bukkitWorld:world;
    public boolean keepSpawnInMemory;

    public (org.bukkit.World) org.bukkit.craftbukkit.CraftWorld getWorld();

    public (org.bukkit.Server) org.bukkit.craftbukkit.CraftServer getServer();

    public (BlockData) IBlockData getBlockData:getType((IntVector3) BlockPosition blockposition);

    /* This is runtime generated to improve performance, avoiding the cost of creating BlockPosition objects */
    public BlockData getBlockDataAtCoord(int x, int y, int z) {
        // CraftBukkit does some special stuff, sometimes, when captureTreeGeneration is set
        if (instance.captureTreeGeneration) {
            IBlockData blockData = instance.getType(new BlockPosition(x, y, z));
            return com.bergerkiller.bukkit.common.wrappers.BlockData.fromBlockData(blockData);
        }

        // Check within bounds of the chunk slices before performing any expensive calls
        if (y >= 0 && y < 256) {
            ChunkSection section = instance.getChunkAt(x >> 4, z >> 4).getSections()[y >> 4];
            if (section != null) {
#if version >= 1.9
                Object blockData = section.getBlocks().a(x & 0xF, y & 0xF, z & 0xF);
#else
                Object blockData = section.getType(x & 0xF, y & 0xF, z & 0xF);
#endif
                return com.bergerkiller.bukkit.common.wrappers.BlockData.fromBlockData(blockData);
            }
        }

        // Fallback is AIR
        return com.bergerkiller.bukkit.common.wrappers.BlockData.AIR;
    }

    <code>
    public static final int UPDATE_PHYSICS = 0x1; // flag specifying block physics should occur after the change
    public static final int UPDATE_NOTIFY = 0x2; // flag specifying the change should be updated to players
    public static final int UPDATE_DEFAULT = (UPDATE_PHYSICS | UPDATE_NOTIFY); // default flags used when updating block types
    </code>

    public boolean setBlockData:setTypeAndData((IntVector3) BlockPosition blockposition, (BlockData) IBlockData iblockdata, int updateFlags);

    public long getTime();

    public optional (Object) IChunkProvider getChunkProvider();

#if version >= 1.13
    public boolean isWithinWorldBorder:i((EntityHandle) Entity entity);
#elseif version >= 1.11.2
    public boolean isWithinWorldBorder:g((EntityHandle) Entity entity);
#elseif version >= 1.8.3
    public boolean isWithinWorldBorder((EntityHandle) Entity entity) {
        return instance.a(instance.getWorldBorder(), entity);
    }
#else
    public boolean isWithinWorldBorder((EntityHandle) Entity entity) {
        return instance.a(instance.af(), entity);
    }
#endif

#if version >= 1.13
    private optional boolean getBlockCollisions:###((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB bounds, boolean flag, (List<AxisAlignedBBHandle>) List<AxisAlignedBB> list);
#elseif version >= 1.11.2
    private optional boolean getBlockCollisions:a((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB bounds, boolean flag, (List<AxisAlignedBBHandle>) List<AxisAlignedBB> list);
#else
    private optional boolean getBlockCollisions:###((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB bounds, boolean flag, (List<AxisAlignedBBHandle>) List<AxisAlignedBB> list);
#endif

    //#if version >= 1.13.1
    //    public (java.util.stream.Stream<VoxelShapeHandle>) java.util.stream.Stream<VoxelShape> getCollisionShapes:a((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz);
    //#elseif version >= 1.13
    //    public (java.util.stream.Stream<VoxelShapeHandle>) VoxelShape getCollisionShapes:a((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz);
    //#elseif version >= 1.11
    //    public (java.util.stream.Stream<VoxelShapeHandle>) List<AxisAlignedBB> getCollisionShapes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz) {
    //        return instance.getCubes(entity, boundingBox.b(dx, dy, dz));
    //    }
    //#else
    //    public (java.util.stream.Stream<VoxelShapeHandle>) List<AxisAlignedBB> getCollisionShapes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz) {
    //        return instance.getCubes(entity, boundingBox.a(dx, dy, dz));
    //    }
    //#endif
    //

#if version >= 1.13
    public boolean isNotCollidingWithBlocks:getCubes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);
#else
    public boolean isNotCollidingWithBlocks((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb) {
        return instance.getCubes(entity, axisalignedbb).isEmpty();
    }
#endif

    // Used by the EntityMoveHandler_1_8 only
#if version >= 1.13
    public optional (List<AxisAlignedBBHandle>) List<AxisAlignedBB> opt_getCubes_1_8:###((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);
#else
    public optional (List<AxisAlignedBBHandle>) List<AxisAlignedBB> opt_getCubes_1_8:getCubes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);
#endif

    public (List<?>) List<T extends Entity> getRawEntitiesOfType:a((Class<?>) Class<? extends Entity> rawType, (AxisAlignedBBHandle) AxisAlignedBB bounds);

    public (List<EntityHandle>) List<Entity> getNearbyEntities:getEntities((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);

    public (TileEntityHandle) TileEntity getTileEntity((IntVector3) BlockPosition blockposition);

    public (WorldDataHandle) WorldData getWorldData();

    // Used on MC 1.8.8 only!
#if version >= 1.9
    public optional void makeSound:###(double x, double y, double z, String name, float volume, float pitch);
#else
    public optional void makeSound(double x, double y, double z, String name, float volume, float pitch);
#endif

#if version >= 1.15
    public boolean isBurnArea:c((AxisAlignedBBHandle) AxisAlignedBB bounds);
#elseif version >= 1.13
    public boolean isBurnArea:b((AxisAlignedBBHandle) AxisAlignedBB bounds);
#elseif version >= 1.11.2
    public boolean isBurnArea:e((AxisAlignedBBHandle) AxisAlignedBB bounds);
#elseif version >= 1.9
    public boolean isBurnArea:f((AxisAlignedBBHandle) AxisAlignedBB bounds);
#else
    public boolean isBurnArea:e((AxisAlignedBBHandle) AxisAlignedBB bounds);
#endif

#if version >= 1.9
    public (org.bukkit.entity.Entity) Entity getEntityById:getEntity(int entityId);
#else
    public (org.bukkit.entity.Entity) Entity getEntityById:a(int entityId);
#endif

    // Gone since 1.14
    // public float getExplosionFactor:a((org.bukkit.util.Vector) Vec3D vec3d, (AxisAlignedBBHandle) AxisAlignedBB bounds);

#if version >= 1.14
    // Gone since 1.14, but isAreaLoaded still exists
    public boolean areChunksLoaded((IntVector3) BlockPosition blockposition, int distance) {
        return instance.isAreaLoaded(blockposition.getX() - distance, blockposition.getY() - distance, blockposition.getZ() - distance,
                                     blockposition.getX() + distance, blockposition.getY() + distance, blockposition.getZ() + distance);
    }
#else
    // Note: moved to IWorldReader interface on MC 1.13
    public boolean areChunksLoaded((IntVector3) BlockPosition blockposition, int distance);
#endif

#if version >= 1.14
    // Fallback...
    public (MovingObjectPositionHandle) MovingObjectPosition rayTrace((org.bukkit.util.Vector) Vec3D point1, (org.bukkit.util.Vector) Vec3D point2) {
        RayTrace rayTrace = new RayTrace(point1, point2, RayTrace.BlockCollisionOption.OUTLINE, RayTrace.FluidCollisionOption.NONE, null);
        MovingObjectPosition result = instance.rayTrace(rayTrace);
        if (result != null && result.getType() == MovingObjectPosition.EnumMovingObjectType.MISS) {
            result = null;
        }
        return result;
    }
#elseif version >= 1.13
    // Fallback...
    public (MovingObjectPositionHandle) MovingObjectPosition rayTrace((org.bukkit.util.Vector) Vec3D point1, (org.bukkit.util.Vector) Vec3D point2) {
        return instance.rayTrace(point1, point2);
    }
#else
    public (MovingObjectPositionHandle) MovingObjectPosition rayTrace((org.bukkit.util.Vector) Vec3D point1, (org.bukkit.util.Vector) Vec3D point2);
#endif

    // >= 1.11 (has 'self' option)
    public optional void opt_applyPhysics:applyPhysics((IntVector3) BlockPosition position, (BlockData) Block causeType, boolean self);

    // <= 1.10.2 (lacks 'self' option)
    public optional void opt_applyPhysics_old:applyPhysics((IntVector3) BlockPosition position, (BlockData) Block causeType);

    <code>
    public void applyPhysics(IntVector3 position, BlockData causeType, boolean self) {
        if (T.opt_applyPhysics.isAvailable()) {
            T.opt_applyPhysics.invoke(getRaw(), position, causeType, self);
        } else if (T.opt_applyPhysics_old.isAvailable()) {
            T.opt_applyPhysics_old.invoke(getRaw(), position, causeType);
        } else {
            throw new UnsupportedOperationException("Apply physics function not available on this server");
        }
        // Update self
        if (self) {
            applyBlockPhysics(position, causeType);
        }
    }
    </code>

    public void applyBlockPhysics((IntVector3) BlockPosition position, (BlockData) Block causeType) {
#if version >= 1.11
        instance.a(position, causeType, position);
#elseif version >= 1.9
        instance.e(position, causeType);
#else
        instance.d(position, causeType);
#endif
    }

#if version >= 1.9
    #require net.minecraft.server.NibbleArray public byte[] getNibbleData:asBytes();
#else
    #require net.minecraft.server.NibbleArray public byte[] getNibbleData:a();
#endif

#if version >= 1.14
    #require net.minecraft.server.LightEngine private final LightEngineLayer<?, ?> light_layer_block:a;
    #require net.minecraft.server.LightEngine private final LightEngineLayer<?, ?> light_layer_sky:b;

    public byte[] getSectionSkyLight(int cx, int cy, int cz) {
        LightEngine light = ((ChunkProviderServer) instance.getChunkProvider()).getLightEngine();
        LightEngineLayer layer = light#light_layer_sky;
        NibbleArray array = layer.a(SectionPosition.a(cx, cy, cz));
        if (array == null) {
            return null;
        }
        return (byte[]) array#getNibbleData().clone();
    }

    public byte[] getSectionBlockLight(int cx, int cy, int cz) {
        LightEngine light = ((ChunkProviderServer) instance.getChunkProvider()).getLightEngine();
        LightEngineLayer layer = light#light_layer_block;
        NibbleArray array = layer.a(SectionPosition.a(cx, cy, cz));
        if (array == null) {
            return null;
        }
        return (byte[]) array#getNibbleData().clone();
    }
#else
    #require net.minecraft.server.Chunk private final ChunkSection[] sections;

    public byte[] getSectionSkyLight(int cx, int cy, int cz) {
        Chunk chunk = instance.getChunkAt(cx, cz);
        ChunkSection[] sections = chunk#sections;
        if (cy < 0 || cy >= sections.length) {
            return null;
        }
        ChunkSection section = sections[cy];
        if (section == null) {
            return null;
        }
        NibbleArray array = section.getSkyLightArray();
        if (array == null) {
            return null;
        }
        return (byte[]) array#getNibbleData().clone();
    }

    public byte[] getSectionBlockLight(int cx, int cy, int cz) {
        Chunk chunk = instance.getChunkAt(cx, cz);
        ChunkSection[] sections = chunk#sections;
        if (cy < 0 || cy >= sections.length) {
            return null;
        }
        ChunkSection section = sections[cy];
        if (section == null) {
            return null;
        }
        NibbleArray array = section.getEmittedLightArray();
        if (array == null) {
            return null;
        }
        return (byte[]) array#getNibbleData().clone();
    }
#endif

    <code>
    public org.bukkit.World toBukkit() {
        return com.bergerkiller.bukkit.common.conversion.Conversion.toWorld.convert(getRaw());
    }

    public static WorldHandle fromBukkit(org.bukkit.World world) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toWorldHandle.convert(world));
    }
    </code>
}

class WorldServer extends World {
    private final (Map<java.util.UUID, EntityHandle>) Map<java.util.UUID, Entity> entitiesByUUID;

    public optional (ChunkProviderServerHandle) ChunkProviderServer field_chunkProviderServer:chunkProviderServer;

#if version >= 1.14
    public (List<EntityPlayerHandle>) List<EntityPlayer> getPlayers();
#else
    // Note: is List<EntityHuman> on 1.13.2 and before, but only stores players, so this is safe.
    public (List<EntityPlayerHandle>) List<EntityPlayer> getPlayers() {
        return instance.players;
    }
#endif

    public com.bergerkiller.bukkit.common.wrappers.EntityTracker getEntityTracker() {
        Object handle = com.bergerkiller.generated.net.minecraft.server.WorldServerHandle.T.getEntityTrackerHandle.invoke(instance);

        // If hooked, make sure to take the original so that changes can be made safely
        com.bergerkiller.mountiplex.reflection.ClassInterceptor hook;
        hook = com.bergerkiller.mountiplex.reflection.ClassInterceptor.get(handle, com.bergerkiller.bukkit.common.internal.hooks.EntityTrackerHook.class);
        if (hook != null) {
            handle = ((com.bergerkiller.bukkit.common.internal.hooks.EntityTrackerHook) hook).original;
        }

        // Convert to EntityTracker
        return new com.bergerkiller.bukkit.common.wrappers.EntityTracker(handle);
    }

#if version >= 1.14
    public Object getEntityTrackerHandle() {
        return instance.getChunkProvider().playerChunkMap;
    }

    public void setEntityTrackerHandle((Object) EntityTracker entityTrackerHandle) {
        #require net.minecraft.server.ChunkProviderServer public final PlayerChunkMap playerChunkMap;
        instance.getChunkProvider()#playerChunkMap = entityTrackerHandle;
    }

    public (PlayerChunkMapHandle) PlayerChunkMap getPlayerChunkMap() {
        return instance.getChunkProvider().playerChunkMap;
    }
#else
    public Object getEntityTrackerHandle() {
        return instance.tracker;
    }

    public void setEntityTrackerHandle((Object) EntityTracker entityTrackerHandle) {
        instance.tracker = entityTrackerHandle;
    }

    public (PlayerChunkMapHandle) PlayerChunkMap getPlayerChunkMap();
#endif

    public (ChunkProviderServerHandle) ChunkProviderServer getChunkProviderServer() {
#if version >= 1.9
        return (ChunkProviderServer) instance.getChunkProvider();
#else
        return instance.chunkProviderServer;
#endif
    }

    public (org.bukkit.Chunk) Chunk getChunkIfLoaded(int cx, int cz) {
        ChunkProviderServer cps;
#if version >= 1.13.2
        cps = (ChunkProviderServer) instance.getChunkProvider();
#elseif version >= 1.9
        cps = instance.getChunkProviderServer();
#else
        cps = instance.chunkProviderServer;
#endif

#if version >= 1.14
        long key = ChunkCoordIntPair.pair(cx, cz);

  #if exists net.minecraft.server.PlayerChunkMap public final com.tuinity.tuinity.chunk.QueuedChangesMapLong2Object<net.minecraft.server.PlayerChunk> chunkMap;
        PlayerChunk chunk = (PlayerChunk) cps.playerChunkMap.chunkMap.getVisible(key);
  #else
        PlayerChunk chunk = (PlayerChunk) cps.playerChunkMap.visibleChunks.get(key);
  #endif

        if (chunk != null) {
#if exists net.minecraft.server.PlayerChunk public Chunk getFullChunk()
            return chunk.getFullChunk();
#else
            java.util.concurrent.CompletableFuture statusFuture;
  #if exists net.minecraft.server.PlayerChunk public java.util.concurrent.CompletableFuture getStatusFutureUnchecked(ChunkStatus chunkstatus)
            statusFuture = chunk.getStatusFutureUnchecked(ChunkStatus.FULL);
  #else
            statusFuture = chunk.a(ChunkStatus.FULL);
  #endif
            com.mojang.datafixers.util.Either either = (com.mojang.datafixers.util.Either) statusFuture.getNow(null);
            return either == null ? null : (Chunk) either.left().orElse(null);
#endif
        }
        return null;

        // Note: suffers server crash bug on earlier versions of Spigot
        // return instance.getChunkAt(cx, cz, ChunkStatus.FULL, false);
#elseif version >= 1.13.1
        long key = ChunkCoordIntPair.a(cx, cz);
        return (Chunk) cps.chunks.get(key);

        // Note: suffers deadlock because of synchronized (this.chunkLoader) (chunks are already synchronized, anyway)
        // return cps.getChunkAt(cx, cz, false, false);
#else
        return cps.getChunkIfLoaded(cx, cz);
#endif
    }

#if exists net.minecraft.server.TicketType public static final net.minecraft.server.TicketType<org.bukkit.plugin.Plugin> PLUGIN_TICKET;
    public optional void setForceLoadedAsync(int x, int z, org.bukkit.plugin.Plugin plugin, boolean loaded) {
        ChunkMapDistance chunkDistanceManager;
  #if exists net.minecraft.server.PlayerChunkMap public final net.minecraft.server.PlayerChunkMap.a chunkDistanceManager;
        chunkDistanceManager = instance.getChunkProvider().playerChunkMap.chunkDistanceManager;
  #else
        chunkDistanceManager = instance.getChunkProvider().playerChunkMap.u;
  #endif

        int level = 31;
        ChunkCoordIntPair chunkCoord = new ChunkCoordIntPair(x, z);
        if (loaded) {
            chunkDistanceManager.addTicketAtLevel(TicketType.PLUGIN_TICKET, chunkCoord, level, plugin);
        } else {
            chunkDistanceManager.removeTicketAtLevel(TicketType.PLUGIN_TICKET, chunkCoord, level, plugin);
        }
    }
#elseif version >= 1.13.1
    public optional void setForceLoadedAsync(int x, int z, org.bukkit.plugin.Plugin plugin, boolean loaded) {
        com.bergerkiller.mountiplex.reflection.declarations.Template.Method getForcedChunkMethod;
        getForcedChunkMethod = (com.bergerkiller.mountiplex.reflection.declarations.Template.Method) com.bergerkiller.generated.net.minecraft.server.WorldServerHandle.T.getForcedChunk.raw;
        ForcedChunk forcedchunk = (ForcedChunk) getForcedChunkMethod.invoke(instance);

  #if version >= 1.14
        long key = ChunkCoordIntPair.pair(x, z);
  #else
        long key = ChunkCoordIntPair.a(x, z);
  #endif

        boolean changed;
        if (loaded) {
            changed = forcedchunk.a().add(key);
        } else {
            changed = forcedchunk.a().remove(key);
        }
        forcedchunk.a(changed);

  #if version >= 1.14
        if (changed) {
            ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(x, z);
            instance.getChunkProvider().a(chunkcoordintpair, loaded);
        }
  #endif
    }
#else
    public optional void setForceLoadedAsync:###(int x, int z, org.bukkit.plugin.Plugin plugin, boolean loaded);
#endif

#if version >= 1.14
    public optional (ForcedChunkHandle) ForcedChunk getForcedChunk() {
        return (ForcedChunk) instance.getWorldPersistentData().a(
            com.bergerkiller.bukkit.common.internal.logic.ForcedChunkSupplier.INSTANCE,
            "chunks"
        );
    }
#elseif version >= 1.13.1
    public optional (ForcedChunkHandle) ForcedChunk getForcedChunk() {
        ForcedChunk forcedchunk = (ForcedChunk) instance.a(
            instance.worldProvider.getDimensionManager(),
            com.bergerkiller.bukkit.common.internal.logic.ForcedChunkSupplier.INSTANCE,
            "chunks"
        );
        if (forcedchunk == null) {
            forcedchunk = new ForcedChunk("chunks");
            instance.a(instance.worldProvider.getDimensionManager(), "chunks", forcedchunk);
        }
        return forcedchunk;
    }
#else
    public optional (ForcedChunkHandle) ForcedChunk getForcedChunk:###();
#endif

#if version >= 1.14
    public (WorldNBTStorageHandle) WorldNBTStorage getDataManager();
#else
    public (WorldNBTStorageHandle) WorldNBTStorage getDataManager() {
        return (WorldNBTStorage) instance.getDataManager();
    }
#endif

#if version >= 1.14
    public (Collection<EntityHandle>) Collection<Entity> getEntities() {
        return instance.entitiesById.values();
    }
#elseif fieldexists net.minecraft.server.World public final com.destroystokyo.paper.PaperWorldEntityList entityList
    public (Collection<EntityHandle>) com.destroystokyo.paper.PaperWorldEntityList getEntities() {
        return instance.entityList;
    }
#else
    public (Collection<EntityHandle>) Collection<Entity> getEntities() {
        return instance.entityList;
    }
#endif

    public void removeEntity((EntityHandle) Entity entity);

    public boolean addEntity((EntityHandle) Entity entity);

    public (MinecraftServerHandle) MinecraftServer getMinecraftServer();

#if version >= 1.14
    public void saveLevel() {
        #require net.minecraft.server.PlayerChunkMap protected void saveChunkMap:save(boolean flag);
        ChunkProviderServer cps = (ChunkProviderServer) instance.getChunkProvider();
        cps.playerChunkMap#saveChunkMap(true);
    }
#elseif version >= 1.13
    public void saveLevel() {
        instance.getDataManager().a();
    }
#else
    public void saveLevel();
#endif

    <code>
    public static WorldServerHandle fromBukkit(org.bukkit.World world) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toWorldHandle.convert(world));
    }

    public void setChunkProviderServer(ChunkProviderServerHandle chunkProviderServerHandle) {
        if (T.field_chunkProviderServer.isAvailable()) {
            T.field_chunkProviderServer.set(getRaw(), chunkProviderServerHandle);
        }
        if (WorldHandle.T.field_chunkProvider.isAvailable()) {
            WorldHandle.T.field_chunkProvider.set(getRaw(), chunkProviderServerHandle.getRaw());
        }
    }
    </code>
}

// Since MC 1.14
optional class LightEngineThreaded {

    private void schedule:a(int cx, int cz, java.util.function.IntSupplier ticketLevelSupplier, (Object) LightEngineThreaded.Update lightenginethreaded_update, Runnable runnable);

    public static LightEngineThreadedHandle forWorld((org.bukkit.World) World world) {
        return com.bergerkiller.generated.net.minecraft.server.LightEngineThreadedHandle.createHandle(((ChunkProviderServer) world.getChunkProvider()).getLightEngine());
    }
}

// Since MC 1.13.1
optional class ForcedChunk {
}

class ChunkProviderServer {
    // Gone since MC 1.14
    // private final (Object) IChunkLoader chunkLoader;

    public final (WorldServerHandle) WorldServer world;

#if version >= 1.14
    public (ChunkHandle) Chunk getChunkAt(int cx, int cz) {
        return (Chunk) instance.getChunkAt(cx, cz, ChunkStatus.FULL, true);
    }
#elseif version >= 1.13.1
    public (ChunkHandle) Chunk getChunkAt(int cx, int cz) {
        return instance.getChunkAt(cx, cz, true, true);
    }
#else
    public (ChunkHandle) Chunk getChunkAt(int cx, int cz);
#endif

#if version >= 1.14
    public java.util.concurrent.Executor getAsyncExecutor() {
        #require net.minecraft.server.ChunkProviderServer private final (java.util.concurrent.Executor) ChunkProviderServer.a serverThreadQueue;
        return instance#serverThreadQueue;
    }
#else
    public java.util.concurrent.Executor getAsyncExecutor() {
        return null;
    }
#endif

#if version >= 1.14
    public void getChunkAtAsync(int cx, int cz, java.util.function.Consumer<?> consumer) {
        #require net.minecraft.server.ChunkProviderServer private java.util.concurrent.CompletableFuture<com.mojang.datafixers.util.Either<IChunkAccess, PlayerChunk.Failure>> getChunkFutureMainThread(int cx, int cz, ChunkStatus chunkstatus, boolean flag);

        java.util.concurrent.CompletableFuture future;
        future = instance#getChunkFutureMainThread(cx, cz, ChunkStatus.FULL, true);
        future.thenAccept(consumer);
    }
#elseif version >= 1.13
    public void getChunkAtAsync(int cx, int cz, java.util.function.Consumer<?> consumer) {
        Iterable iterable = java.util.Collections.singleton(new ChunkCoordIntPair(cx, cz));
  #if methodexists net.minecraft.server.ChunkProviderServer public java.util.concurrent.CompletableFuture<Void> loadAllChunks(Iterable<net.minecraft.server.ChunkCoordIntPair> iterable, java.util.function.Consumer<net.minecraft.server.Chunk> consumer)
        instance.loadAllChunks(iterable, consumer);
  #else
        instance.a(iterable, consumer);
  #endif
    }
#else
    public void getChunkAtAsync(int cx, int cz, java.util.function.Consumer<?> consumer) {
        com.bergerkiller.bukkit.common.internal.proxy.ChunkConsumerProxy proxy;
        proxy = new com.bergerkiller.bukkit.common.internal.proxy.ChunkConsumerProxy(consumer, instance, cx, cz);
        instance.getChunkAt(cx, cz, proxy);
    }
#endif

#if version >= 1.14
    public void saveLoadedChunk((ChunkHandle) Chunk chunk) {
        // Since 1.14: moved to PlayerChunkMap
        instance.playerChunkMap.saveChunk(chunk);
    }
#elseif exists net.minecraft.server.ChunkProviderServer public void saveChunk(Chunk chunk);
    // <= 1.12
    public void saveLoadedChunk:saveChunk((ChunkHandle) Chunk chunk);
#else
    public void saveLoadedChunk((ChunkHandle) Chunk chunk) {
        // Since 1.12.1 ish: added unloaded=false parameter
        instance.saveChunk(chunk, false);
    }
#endif

#if version >= 1.14
    public void markBlockDirty:flagDirty((BlockPositionHandle) BlockPosition blockPosition);
#else
    public void markBlockDirty((BlockPositionHandle) BlockPosition blockPosition) {
        instance.world.getPlayerChunkMap().flagDirty(blockPosition);
    }
#endif
}

class WorldData {
    public (WorldTypeHandle) WorldType getType();

#if version >= 1.13
    public void setClearTimer:g(int ticks);
#else
    public void setClearTimer:i(int ticks);
#endif
}

class WorldType {
    private final String name;

#if version >= 1.13
    #if pre == 7
        public (Dimension) int getDimension:h();
    #else
        public (Dimension) int getDimension:i();
    #endif
#else
    public (Dimension) int getDimension:g();
#endif

    public static (WorldTypeHandle) WorldType getType(String name)
}

class WorldProvider {
    // See: Chunk initLighting()
    // if (this.world.worldProvider.m()) {
    //     l = 15;
    //     ...
#if version >= 1.15
    public boolean hasSkyLight:f();
#elseif version >= 1.13
    public boolean hasSkyLight:g();
#elseif version >= 1.11
    public boolean hasSkyLight:m();
#elseif version >= 1.9
    public boolean hasSkyLight() {
        return !instance.m();
    }
#else
    public boolean hasSkyLight() {
        return !instance.o();
    }
#endif

<code>
    public boolean isDarkWorld() {
        return !hasSkyLight();
    }
</code>

#if version >= 1.9
    public (Dimension) DimensionManager getDimension:getDimensionManager();
#else
    public (Dimension) int getDimension();
#endif
}

class WeightedRandom {

    class WeightedRandom.WeightedRandomChoice {
        protected int chance:a;
    }
}

class BiomeBase {

    class BiomeBase.BiomeMeta extends WeightedRandom.WeightedRandomChoice {
#if version >= 1.13
        public (java.lang.Class<?>) EntityTypes entityClass:b;
#else
        public (java.lang.Class<?>) java.lang.Class<? extends EntityInsentient> entityClass:b;
#endif
        public int minSpawnCount:c;
        public int maxSpawnCount:d;

#if version >= 1.13
        public (BiomeMetaHandle) BiomeBase.BiomeMeta((java.lang.Class<?>) EntityTypes entityClass, int x, int y, int z);
#else
        public (BiomeMetaHandle) BiomeBase.BiomeMeta((java.lang.Class<?>) java.lang.Class<? extends EntityInsentient> entityClass, int x, int y, int z);
#endif

    }

}

interface IBlockAccess {
}

class WorldNBTStorage {
    public java.io.File getPlayerDir();
}

class MovingObjectPosition {
    public readonly (org.bukkit.util.Vector) Vec3D pos;

    public (org.bukkit.block.BlockFace) EnumDirection getDirection() {
#if version >= 1.14
        if (instance instanceof MovingObjectPositionBlock) {
            return ((MovingObjectPositionBlock) instance).getDirection();
        } else {
            return EnumDirection.DOWN;
        }
#else
        return instance.direction;
#endif
    }
}

class RegionFile {
#if version >= 1.15
    public void closeStream() {
        try {
            instance.close();
        } catch (java.nio.channels.ClosedChannelException ex) {
            // Suppress
        }
    }
#elseif methodexists net.minecraft.server.RegionFile public void close()
    public void closeStream:close();
#else
    public void closeStream:c();
#endif

#if version >= 1.15
    public boolean chunkExists(int cx, int cz) {
        return instance.chunkExists(new ChunkCoordIntPair(cx, cz));
    }
#elseif version >= 1.14
    public boolean chunkExists(int cx, int cz) {
        return instance.d(new ChunkCoordIntPair(cx, cz));
    }
#elseif version >= 1.13
    #if pre <= 7
        public boolean chunkExists:c(int cx, int cz);
    #else
        public boolean chunkExists:d(int cx, int cz);
    #endif
#else
    public boolean chunkExists:c(int cx, int cz);
#endif
}
