package net.minecraft.server;

import com.bergerkiller.generated.net.minecraft.server.RegistryMaterialsHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle;

class EntityTypes {

    // 1.10.2 and before used a Map<String, Class> and Map<Class, String> to store name to entity class information
#if version >= 1.11
    private static optional final (Map<String, Class<?>>) Map<String, Class<? extends Entity>> opt_nameTypeMap_1_10_2:###;
    private static optional final (Map<Class<?>, String>) Map<Class<? extends Entity>, String> opt_typeNameMap_1_10_2:###;
#else
    private static optional final (Map<String, Class<?>>) Map<String, Class<? extends Entity>> opt_nameTypeMap_1_10_2:c;
    private static optional final (Map<Class<?>, String>) Map<Class<? extends Entity>, String> opt_typeNameMap_1_10_2:d;
#endif

    // Between MC 1.11 and 1.12.2 inclusively, this is used to find the 'name' of an entity by type id
#if version >= 1.11
  #if version <= 1.12.2
    private static optional final List<String> opt_typeIdToName_1_11:g;
  #else
    private static optional final List<String> opt_typeIdToName_1_11:###;
  #endif
#else
    private static optional final List<String> opt_typeIdToName_1_11:###;
#endif

#if version >= 1.11
    private static optional final (Map<Class<?>, Integer>) Map<Class<? extends Entity>, Integer> opt_typeIdMap_1_8:###;
#elseif version >= 1.8.3
    private static optional final (Map<Class<?>, Integer>) Map<Class<? extends Entity>, Integer> opt_typeIdMap_1_8:f;
#else
    private static optional final (Map<Class<?>, Integer>) Map opt_typeIdMap_1_8:f;
#endif

#if version >= 1.11
    public static optional (RegistryMaterialsHandle) RegistryMaterials<MinecraftKey, EntityTypes<?>> opt_getRegistry() {
  #if version >= 1.14
        #require net.minecraft.server.IRegistry public static final RegistryBlocks<EntityTypes<?>> REGISTRY:ENTITY_TYPE;
  #elseif version >= 1.13.1
        #require net.minecraft.server.IRegistry public static final IRegistry<EntityTypes<?>> REGISTRY:ENTITY_TYPE;
  #elseif version >= 1.13
        #require net.minecraft.server.EntityTypes public static final RegistryMaterials<MinecraftKey, EntityTypes<?>> REGISTRY;
  #else
        #require net.minecraft.server.EntityTypes public static final RegistryMaterials<MinecraftKey, Class<? extends Entity>> REGISTRY:b;
  #endif
        return (RegistryMaterials) #REGISTRY;
    }
#else
    public static optional (RegistryMaterialsHandle) RegistryMaterials<MinecraftKey, EntityTypes<?>> opt_getRegistry:###();
#endif

#if version >= 1.14
    public optional (Class<?>) Class<? extends Entity> getEntityClassInst() {
        return com.bergerkiller.bukkit.common.internal.logic.EntityTypingHandler.INSTANCE.getClassFromEntityTypes(instance);
    }

    public optional int getTypeId() {
        return IRegistry.ENTITY_TYPE.a(instance);
    }
#elseif version >= 1.13
    public optional (Class<?>) Class<? extends Entity> getEntityClassInst:c();
    public optional int getTypeId:###();
#else
    public optional (Class<?>) Class<? extends Entity> getEntityClassInst:###();
    public optional int getTypeId:###();
#endif

#if version >= 1.13
    public static optional (EntityTypesHandle) EntityTypes fromEntityClass(Class<?> entityType) {
#if version >= 1.13.1
        java.util.Iterator iter = IRegistry.ENTITY_TYPE.iterator();
#else
        java.util.Iterator iter = EntityTypes.REGISTRY.iterator();
#endif
        while (iter.hasNext()) {
            EntityTypes type = (EntityTypes) iter.next();
            if (com.bergerkiller.bukkit.common.internal.logic.EntityTypingHandler.INSTANCE.getClassFromEntityTypes(type) == entityType) {
                return type;
            }
        }
        return null;
    }
#else
    public static optional (EntityTypesHandle) EntityTypes fromEntityClass:###(Class<?> entityType);
#endif

#if version >= 1.13

  #if version >= 1.14
    public static Class<?> getEntityClass(String internalEntityName) {
        java.util.Optional opt = EntityTypes.a(internalEntityName);
        if (opt.isPresent()) {
            return com.bergerkiller.bukkit.common.internal.logic.EntityTypingHandler.INSTANCE.getClassFromEntityTypes(opt.get());
        } else {
            return null;
        }
    }
  #else
    public static Class<?> getEntityClass(String internalEntityName) {
        EntityTypes type = EntityTypes.a(internalEntityName);
        if (type == null) {
            return null;
        } else {
            return com.bergerkiller.bukkit.common.internal.logic.EntityTypingHandler.INSTANCE.getClassFromEntityTypes(type);
        }
    }
  #endif

    public static String getEntityInternalName(Class<?> entityType) {
  #if version >= 1.13.1
        java.util.Iterator iter = IRegistry.ENTITY_TYPE.iterator();
  #else
        java.util.Iterator iter = EntityTypes.REGISTRY.iterator();
  #endif
        while (iter.hasNext()) {
            EntityTypes type = (EntityTypes) iter.next();
            if (com.bergerkiller.bukkit.common.internal.logic.EntityTypingHandler.INSTANCE.getClassFromEntityTypes(type) == entityType) {
                MinecraftKey key = EntityTypes.getName(type);
                if (key != null) {
                    return key.toString();
                }
            }
        }
        return null;
    }

    public static int getEntityTypeId(Class<?> entityType) {
  #if version >= 1.13.1
        java.util.Iterator iter = IRegistry.ENTITY_TYPE.iterator();
  #else
        java.util.Iterator iter = EntityTypes.REGISTRY.iterator();
  #endif
        while (iter.hasNext()) {
            EntityTypes type = (EntityTypes) iter.next();
            if (com.bergerkiller.bukkit.common.internal.logic.EntityTypingHandler.INSTANCE.getClassFromEntityTypes(type) == entityType) {
  #if version >= 1.13.1
                return IRegistry.ENTITY_TYPE.a((Object) type);
  #else
                return EntityTypes.REGISTRY.a((Object) type);
  #endif
            }
        }
        return -1;
    }

#elseif version >= 1.11

    public static Class<?> getEntityClass(String internalEntityName) {
        #require net.minecraft.server.EntityTypes public static final RegistryMaterials<MinecraftKey, Class<? extends Entity>> REGISTRY:b;
        #require net.minecraft.server.RegistryMaterials public V get(K key);
        RegistryMaterials registry = #REGISTRY;
        MinecraftKey key = new MinecraftKey(internalEntityName);
        return (Class) registry#get(key);
    }

    public static String getEntityInternalName(Class<?> entityType) {
        #require net.minecraft.server.EntityTypes public static MinecraftKey getName(Class<? extends Entity> oclass);
        MinecraftKey key = EntityTypes#getName(entityType);
        if (key == null) {
            return null;
        } else {
            return key.toString();
        }
    }

    public static int getEntityTypeId(Class<?> entityType) {
        #require net.minecraft.server.EntityTypes public static final RegistryMaterials<MinecraftKey, Class<? extends Entity>> REGISTRY:b;
        #require net.minecraft.server.RegistryMaterials public int getId:a(V value);
        RegistryMaterials registry = #REGISTRY;
        return registry#getId(entityType);
    }

#elseif version >= 1.9

    public static Class<?> getEntityClass(String internalEntityName) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_nameTypeMap_1_10_2.get();
        return (Class) map.get(internalEntityName);
    }

    public static String getEntityInternalName(Class<?> entityType) {
        return EntityTypes.getName(entityType);
    }

    public static int getEntityTypeId(Class<?> entityType) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_typeIdMap_1_8.get();
        Integer id = (Integer) map.get(entityType);
        if (id != null) {
            return id.intValue();
        } else {
            return -1;
        }
    }

#else

    public static Class<?> getEntityClass(String internalEntityName) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_nameTypeMap_1_10_2.get();
        return (Class) map.get(internalEntityName);
    }

    public static String getEntityInternalName(Class<?> entityType) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_typeNameMap_1_10_2.get();
        return (String) map.get(entityType);
    }

    public static int getEntityTypeId(Class<?> entityType) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_typeIdMap_1_8.get();
        Integer id = (Integer) map.get(entityType);
        if (id != null) {
            return id.intValue();
        } else {
            return -1;
        }
    }
#endif

}
