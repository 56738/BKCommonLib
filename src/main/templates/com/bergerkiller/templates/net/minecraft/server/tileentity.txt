package net.minecraft.server;

import com.bergerkiller.bukkit.common.bases.IntVector3;
import com.bergerkiller.bukkit.common.nbt.CommonTagCompound;
import com.bergerkiller.bukkit.common.protocol.CommonPacket;
import com.bergerkiller.bukkit.common.wrappers.BlockData;

import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.BlockPositionHandle;

class TileEntity {
    protected (org.bukkit.World) World world_field:world;
    protected (IntVector3) BlockPosition position_field:position;

    public (WorldHandle) World getWorld();

    public (BlockPositionHandle) BlockPosition getPosition();

    public (BlockData) IBlockData getBlockDataIfCached() {
#if version >= 1.14
        #require net.minecraft.server.TileEntity private IBlockData cachedBlockData:c;
        return instance#cachedBlockData;
#elseif version >= 1.13
        #require net.minecraft.server.TileEntity private IBlockData cachedBlockData:f;
        return instance#cachedBlockData;
#else
  #if version >= 1.11
        #require net.minecraft.server.TileEntity private int cachedBlockDataValue:g;
        #require net.minecraft.server.TileEntity protected Block cachedBlockDataBlock:e;
  #else
        #require net.minecraft.server.TileEntity private int cachedBlockDataValue:h;
        #require net.minecraft.server.TileEntity protected Block cachedBlockDataBlock:e;
  #endif

        Block block = instance#cachedBlockDataBlock;
        if (block == null) {
            return null;
        }
        int value = instance#cachedBlockDataValue;
        if (value == -1) {
            return null;
        }
        return block.fromLegacyData(value);
#endif
    }

#if version >= 1.13
    public (BlockData) IBlockData getBlockData:getBlock();

    public (org.bukkit.Material) Block getType() {
        return instance.getBlock().getBlock();
    }

    public optional int getLegacyData:###();

    public (CommonPacket) PacketPlayOutTileEntityData getUpdatePacket();
    public void load((CommonTagCompound) NBTTagCompound nbttagcompound);
    public (void) NBTTagCompound save((CommonTagCompound) NBTTagCompound nbttagcompound);

#else

    public (BlockData) IBlockData getBlockData() {
        Block block;
        int rawData;
    #if version >= 1.11
        rawData = instance.v();
    #else
        rawData = instance.u();
    #endif
    #if version >= 1.9
        block = instance.getBlock();
    #else
        block = instance.w();
    #endif
        return block.fromLegacyData(rawData);
    }

    #if version >= 1.11
        public optional int getLegacyData:v();
    #else
        public optional int getLegacyData:u();
    #endif

    #if version >= 1.12.1
        public (org.bukkit.Material) Block getType:getBlock();
        public (CommonPacket) PacketPlayOutTileEntityData getUpdatePacket();
        public void load((CommonTagCompound) NBTTagCompound nbttagcompound);
        public (void) NBTTagCompound save((CommonTagCompound) NBTTagCompound nbttagcompound);
    #elseif version >= 1.9.4
        public (org.bukkit.Material) Block getType:getBlock();
        public (CommonPacket) PacketPlayOutTileEntityData getUpdatePacket();
        public void load:a((CommonTagCompound) NBTTagCompound nbttagcompound);
        public (void) NBTTagCompound save((CommonTagCompound) NBTTagCompound nbttagcompound);
    #elseif version >= 1.9
        public (org.bukkit.Material) Block getType:getBlock();
        public (CommonPacket) Packet<?> getUpdatePacket();
        public void load:a((CommonTagCompound) NBTTagCompound nbttagcompound);
        public (void) void save((CommonTagCompound) NBTTagCompound nbttagcompound);
    #else
        public (org.bukkit.Material) Block getType:w();
        public (CommonPacket) Packet getUpdatePacket();
        public void load:a((CommonTagCompound) NBTTagCompound nbttagcompound);
        public void save:b((CommonTagCompound) NBTTagCompound nbttagcompound);
    #endif

#endif

    <code>
    public org.bukkit.block.BlockState toBukkit() {
        return com.bergerkiller.bukkit.common.conversion.Conversion.toBlockState.convert(getRaw());
    }

    public static TileEntityHandle fromBukkit(org.bukkit.block.BlockState blockState) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toTileEntityHandle.convert(blockState));
    }
    </code>
}
