package net.minecraft.server;

import com.bergerkiller.bukkit.common.nbt.CommonTagCompound;
import com.bergerkiller.generated.net.minecraft.server.ItemStackHandle;
import com.bergerkiller.generated.net.minecraft.server.IBlockDataHandle;
import com.bergerkiller.generated.net.minecraft.server.RecipesFurnaceHandle;
import com.bergerkiller.bukkit.common.wrappers.ChatText;

class ItemStack {
#if version >= 1.16
    public optional static final (ItemStackHandle) ItemStack OPT_EMPTY_ITEM:b;
#elseif version >= 1.11
    public optional static final (ItemStackHandle) ItemStack OPT_EMPTY_ITEM:a;
#else
    public optional static final (ItemStackHandle) ItemStack OPT_EMPTY_ITEM:###;
#endif

    private int amountField:count;
    private (org.bukkit.Material) Item typeField:item;
    private (com.bergerkiller.bukkit.common.nbt.CommonTagCompound) NBTTagCompound tagField:tag;

#if version >= 1.13
    private optional int durabilityField:###;
#else
    private optional int durabilityField:damage;
#endif

    <code>
    public static final ItemStackHandle EMPTY_ITEM;
    static {
        // On 1.11.2, an empty item constant is used. <= 1.9, null is used.
        if (T.OPT_EMPTY_ITEM.isAvailable()) {
            EMPTY_ITEM = T.OPT_EMPTY_ITEM.get();
        } else {
            EMPTY_ITEM = T.createHandle(null, true);
        }
    }
    </code>

    // available since MC 1.11
    public optional boolean isEmpty();

    // Create a default ItemStack with type STONE amount 1
    public static (ItemStackHandle) ItemStack newInstance() {
        #require net.minecraft.server.Blocks public static final net.minecraft.server.Block STONE;
#if version >= 1.13
        return new ItemStack(#STONE, 1);
#elseif version >= 1.11.2
        #require net.minecraft.server.Item public static net.minecraft.server.Item getItemOf(net.minecraft.server.Block block);
        net.minecraft.server.Block block = #STONE;
        return new ItemStack(#getItemOf(block), 1, 0, false);
#else
        return new ItemStack(#STONE, 1, 0);
#endif
    }

    public static (ItemStackHandle) ItemStack fromBlockData((IBlockDataHandle) IBlockData data, int amount) {
        #require net.minecraft.server.IBlockData public abstract Block getBlock();
#if version >= 1.13
        return new ItemStack(data#getBlock(), amount);
#else
        #require net.minecraft.server.Block public int getDropData(IBlockData iblockdata);
        Block block = data#getBlock();
        return new ItemStack(block, amount, block#getDropData(data));
#endif
    }

    public (Object) Item getItem();

#if version >= 1.13
    public (ChatText) IChatBaseComponent getName();
    public (void) ItemStack setName:a((ChatText) IChatBaseComponent name);
#else
    public (ChatText) String getName();

    #if version >= 1.11
        public (void) ItemStack setName:g((ChatText) String name);
    #else
        public (void) ItemStack setName:c((ChatText) String name);
    #endif
#endif


#if version >= 1.13
    public optional void setDamage_1_13:setDamage(int durability);
#else
    public optional void setDamage_1_13:###(int durability);
#endif

    <code>
    public void setDurability(int durability) {
        if (T.setDamage_1_13.isAvailable()) {
            // Only set when durability > 0 or a tag exists
            // This prevents creating a NBT tag for storing durability 0
            if (durability > 0 || getTag() != null) {
                T.setDamage_1_13.invoke(getRaw(), durability);
            }
        } else {
            T.durabilityField.setInteger(getRaw(), durability);
        }
    }
    </code>


    public int getRepairCost();

    public void setRepairCost(int cost);

    public boolean hasName();

    public boolean hasTag();

    public (CommonTagCompound) NBTTagCompound getTag();

    public (CommonTagCompound) NBTTagCompound saveToNBT:save((CommonTagCompound) NBTTagCompound compound);

#if version >= 1.8.8
    public (ItemStackHandle) ItemStack cloneAndSubtract(int n);
#else
    public (ItemStackHandle) ItemStack cloneAndSubtract:a(int n);
#endif

    public (ItemStackHandle) ItemStack cloneItemStack();

    public org.bukkit.inventory.ItemStack toBukkit() {
        return org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(instance);
    }

    public int getMapId() {
#if version >= 1.13
        NBTTagCompound metadata = instance.getTag();
        if (metadata == null) {
            return -1;
        }
        NBTBase mapId = metadata.get("map");
        if (!(mapId instanceof NBTNumber)) {
            return -1;
        }
  #if version >= 1.13.2
        return ((NBTNumber) mapId).asInt();
  #else
        return ((NBTNumber) mapId).e();
  #endif
#else
        return instance.getData();
#endif
    }

    public void setMapId(int mapId) {
#if version >= 1.13
        instance.getOrCreateTag().setInt("map", mapId);
#else
        instance.setData(mapId);
#endif
    }

    public java.util.UUID getMapDisplayUUID() {
        if (instance.getItem() != Items.FILLED_MAP) {
            return null;
        }
        NBTTagCompound metadata = instance.getTag();
        long fallbackMapId;
        if (metadata == null) {
#if version >= 1.13
            return null;
#else
            fallbackMapId = (long) instance.getData();
#endif
        } else {
            NBTBase mapDisplayUUIDMost = metadata.get("mapDisplayUUIDMost");
            if (mapDisplayUUIDMost instanceof NBTTagLong) {
                NBTBase mapDisplayUUIDLeast = metadata.get("mapDisplayUUIDLeast");
                if (mapDisplayUUIDLeast instanceof NBTTagLong) {
                    long mostBits, leastBits;
#if version >= 1.13.2
                    mostBits = ((NBTTagLong) mapDisplayUUIDMost).asLong();
                    leastBits = ((NBTTagLong) mapDisplayUUIDLeast).asLong();
#elseif version >= 1.10.2
                    mostBits = ((NBTTagLong) mapDisplayUUIDMost).d();
                    leastBits = ((NBTTagLong) mapDisplayUUIDLeast).d();
#else
                    mostBits = ((NBTTagLong) mapDisplayUUIDMost).c();
                    leastBits = ((NBTTagLong) mapDisplayUUIDLeast).c();
#endif
                    return new java.util.UUID(mostBits, leastBits);
                }
            }
#if version >= 1.13
            NBTBase mapId = metadata.get("map");
            if (!(mapId instanceof NBTNumber)) {
                return null;
            }
  #if version >= 1.13.2
            fallbackMapId = ((NBTNumber) mapId).asLong();
  #else
            fallbackMapId = ((NBTNumber) mapId).d();
  #endif
#else
            fallbackMapId = (long) instance.getData();
#endif
        }
        return new java.util.UUID(0L, fallbackMapId);
    }

    <code>
    public static ItemStackHandle fromBukkit(org.bukkit.inventory.ItemStack itemStack) {
        if (itemStack == null) {
            return null;
        } else {
            return createHandle(com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toItemStackHandle(itemStack));
        }
    }
    </code>
}
