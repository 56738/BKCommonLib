package net.minecraft.server;

import com.google.common.collect.BiMap;

import com.bergerkiller.generated.net.minecraft.server.EnumDifficultyHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumHandHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumMainHandHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumDirectionHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumDirectionHandle.EnumAxisHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumMoveTypeHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumGamemodeHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumProtocolHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumProtocolDirectionHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumItemSlotHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumChatFormatHandle;

class EnumDifficulty {
    public int getId:a();

    public static (EnumDifficultyHandle) EnumDifficulty getById(int id);
}

class EnumItemSlot {
#if version >= 1.16.3
    public int getIndex:getSlotFlag();
#else
    public int getIndex:c();
#endif

#if version >= 1.13.2
    public String getName:getSlotName();
#else
    public String getName:d();
#endif

    <code>
    public static Object fromIndexRaw(int index) {
        for (Object value : T.getType().getEnumConstants()) {
            if (T.getIndex.invoke(value).intValue() == index) {
                return value;
            }
        }
        return null;
    }
    </code>
}

// Since MC 1.9
optional class EnumHand {
    enum (EnumHandHandle) EnumHand MAIN_HAND;
    enum (EnumHandHandle) EnumHand OFF_HAND;
}

// Since MC 1.9
optional class EnumMainHand {
    enum (EnumMainHandHandle) EnumMainHand LEFT;
    enum (EnumMainHandHandle) EnumMainHand RIGHT;
}

class EnumDirection {
    enum (EnumDirectionHandle) EnumDirection DOWN;
    enum (EnumDirectionHandle) EnumDirection UP;
    enum (EnumDirectionHandle) EnumDirection NORTH;
    enum (EnumDirectionHandle) EnumDirection SOUTH;
    enum (EnumDirectionHandle) EnumDirection WEST;
    enum (EnumDirectionHandle) EnumDirection EAST;

    class EnumDirection.EnumAxis {
        enum (EnumAxisHandle) EnumDirection.EnumAxis X;
        enum (EnumAxisHandle) EnumDirection.EnumAxis Y;
        enum (EnumAxisHandle) EnumDirection.EnumAxis Z;

        <code>
        public int ordinal() {
            return ((Enum<?>) getRaw()).ordinal();
        }
        </code>
    }
}

optional class EnumMoveType {
    enum (EnumMoveTypeHandle) EnumMoveType SELF;
    enum (EnumMoveTypeHandle) EnumMoveType PLAYER;
    enum (EnumMoveTypeHandle) EnumMoveType PISTON;
    enum (EnumMoveTypeHandle) EnumMoveType SHULKER_BOX;
    enum (EnumMoveTypeHandle) EnumMoveType SHULKER;
}

class EnumGamemode {
    int id:f;

    public static (EnumGamemodeHandle) EnumGamemode getById(int id);
}

class EnumProtocol {
    enum (EnumProtocolHandle) EnumProtocol PLAY;

#if version >= 1.15
    // Is no longer a BiMap on 1.15
    #require net.minecraft.server.EnumProtocol private final Map<net.minecraft.server.EnumProtocolDirection, ? extends net.minecraft.server.EnumProtocol.a<?>> packetMap:h;
    #require net.minecraft.server.EnumProtocol.a private final it.unimi.dsi.fastutil.objects.Object2IntMap<Class<? extends net.minecraft.server.Packet<T extends PacketListener>>> packetToIdMap:a;
    #require net.minecraft.server.EnumProtocol.a public Integer getPacketClassId:a(Class<?> packetClass);

    public Class<?> getPacketClassIn(int id) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND);
        java.util.Iterator iter = (map#packetToIdMap).entrySet().iterator();
        while (iter.hasNext()) {
            java.util.Map$Entry e = (java.util.Map$Entry) iter.next();
            int packet_id = ((Integer) e.getValue()).intValue();
            if (packet_id == id) {
                return (Class) e.getKey();
            }
        }
        return null;
    }

    public Class<?> getPacketClassOut(int id) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND);
        java.util.Iterator iter = (map#packetToIdMap).entrySet().iterator();
        while (iter.hasNext()) {
            java.util.Map$Entry e = (java.util.Map$Entry) iter.next();
            int packet_id = ((Integer) e.getValue()).intValue();
            if (packet_id == id) {
                return (Class) e.getKey();
            }
        }
        return null;
    }

    public int getPacketIdIn(Class<?> packetClass) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND);
        Integer id = map#getPacketClassId(packetClass);
        return (id == null) ? -1 : id.intValue();
    }

    public int getPacketIdOut(Class<?> packetClass) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND);
        Integer id = map#getPacketClassId(packetClass);
        return (id == null) ? -1 : id.intValue();
    }
#else
    // BiMap stores the PacketClass<>ID relationship
  #if version >= 1.10.2
    #require net.minecraft.server.EnumProtocol private final Map<net.minecraft.server.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.server.Packet<?>>>> packetMap:h;
  #elseif version >= 1.9
    #require net.minecraft.server.EnumProtocol private final Map<net.minecraft.server.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.server.Packet<?>>>> packetMap:j;
  #elseif version >= 1.8.3
    #require net.minecraft.server.EnumProtocol private final Map<net.minecraft.server.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.server.Packet>>> packetMap:j;
  #else
    #require net.minecraft.server.EnumProtocol private final Map<net.minecraft.server.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.server.Packet>>> packetMap:h;
  #endif

    public Class<?> getPacketClassIn(int id) {
        com.google.common.collect.BiMap map = (com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND);
        return (Class) map.get(Integer.valueOf(id));
    }

    public Class<?> getPacketClassOut(int id) {
        com.google.common.collect.BiMap map = (com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND);
        return (Class) map.get(Integer.valueOf(id));
    }

    public int getPacketIdIn(Class<?> packetClass) {
        com.google.common.collect.BiMap map = ((com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND)).inverse();
        Integer id = (Integer) map.get(packetClass);
        return (id == null) ? -1 : id.intValue();
    }

    public int getPacketIdOut(Class<?> packetClass) {
        com.google.common.collect.BiMap map = ((com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND)).inverse();
        Integer id = (Integer) map.get(packetClass);
        return (id == null) ? -1 : id.intValue();
    }
#endif
}

class EnumProtocolDirection {
    enum (EnumProtocolDirectionHandle) EnumProtocolDirection SERVERBOUND;
    enum (EnumProtocolDirectionHandle) EnumProtocolDirection CLIENTBOUND;
}

class EnumChatFormat {
    enum (EnumChatFormatHandle) EnumChatFormat RESET;

    public int getId:b();

    <code>
    public static final Object[] RAW_VALUES = T.getType().getEnumConstants();
    public static final EnumChatFormatHandle[] VALUES;
    static {
        VALUES = new EnumChatFormatHandle[RAW_VALUES.length];
        for (int i = 0; i < VALUES.length; i++) {
            VALUES[i] = createHandle(RAW_VALUES[i]);
        }
    }

    public static EnumChatFormatHandle byChar(char c) {
        for (EnumChatFormatHandle format : VALUES) {
            String s = format.toString();
            if (s.length() >= 2 && s.charAt(1) == c) {
                return format;
            }
        }
        return RESET;
    }

    public static EnumChatFormatHandle byId(int id) {
        if (id >= 0) {
            for (EnumChatFormatHandle format : VALUES) {
                if (format.getId() == id) {
                    return format;
                }
            }
        }
        return RESET;
    }
    </code>
}

// version >= 1.12
optional class ChatMessageType {
    public byte getId:a();

    public static (Object) ChatMessageType getRawById:a(byte id);
}
