package net.minecraft.world.level.dimension;

import net.minecraft.core.IRegistry;
import net.minecraft.core.IRegistryCustom$Dimension;
import net.minecraft.resources.MinecraftKey;
import net.minecraft.resources.ResourceKey;
import net.minecraft.server.MinecraftServer;
import net.minecraft.world.level.dimension.DimensionManager;

import com.bergerkiller.generated.net.minecraft.world.level.dimension.DimensionManagerHandle;

class DimensionManager {
    #bootstrap com.bergerkiller.bukkit.common.internal.CommonBootstrap.initServer();

#if version >= 1.14
    public boolean hasSkyLight();
#else
    // Fallback for versions before DimensionManager had this property
    // On these versions it is inside WorldProvider, but that one is annoying to use
    public boolean hasSkyLight() {
        return instance.getDimensionID() == 0;
    }
#endif

#if version >= 1.16
  #if version >= 1.17
    #require net.minecraft.server.MinecraftServer public final net.minecraft.core.IRegistryCustom.Dimension registryHolder;
  #elseif version >= 1.16.3
    #require net.minecraft.server.MinecraftServer public final net.minecraft.core.IRegistryCustom.Dimension registryHolder:customRegistry;
  #else
    #require net.minecraft.server.MinecraftServer public final net.minecraft.core.IRegistryCustom.Dimension registryHolder:f;
  #endif

    #require net.minecraft.core.IRegistryCustom public static net.minecraft.core.IRegistry getDimensionTypeRegistry() {
        MinecraftServer server = MinecraftServer.getServer();
        IRegistryCustom$Dimension registry = server#registryHolder;
  #if version >= 1.18
        return registry.ownedRegistryOrThrow(net.minecraft.core.IRegistry.DIMENSION_TYPE_REGISTRY);
  #elseif version >= 1.17
        return registry.b(net.minecraft.core.IRegistry.DIMENSION_TYPE_REGISTRY);
  #else
        return registry.a();
  #endif
    }

    public (com.bergerkiller.bukkit.common.resources.ResourceKey<com.bergerkiller.bukkit.common.resources.DimensionType>) ResourceKey getKey() {
        // First, ask the dimension manager registry what the key is
        IRegistry dimensionTypeRegistry = #getDimensionTypeRegistry();
  #if version >= 1.18
        java.util.Optional key_opt = dimensionTypeRegistry.getResourceKey((Object) instance);
  #else
        java.util.Optional key_opt = dimensionTypeRegistry.c((Object) instance);
  #endif
        if (key_opt.isPresent()) {
            return (ResourceKey) key_opt.get();
        }

        // We track a pair of dimension manager and dimension type when worlds initialize and unload
        // In case it is not part of the registry but a pair is in use by a world, this method
        // can find those.
        Object cached_key = com.bergerkiller.bukkit.common.internal.CommonListener.getResourceKey(instance);
        if (cached_key != null) {
            return (ResourceKey) cached_key;
        }

        throw new IllegalArgumentException("This dimension is not registered");
    }

    public static (DimensionManagerHandle) DimensionManager fromKey((com.bergerkiller.bukkit.common.resources.ResourceKey<com.bergerkiller.bukkit.common.resources.DimensionType>) ResourceKey key) {
        IRegistry dimensionTypeRegistry = #getDimensionTypeRegistry();
  #if version >= 1.18
        return (DimensionManager) dimensionTypeRegistry.get(key);
  #else
        return (DimensionManager) dimensionTypeRegistry.a(key);
  #endif
    }

  #if version >= 1.17
    // deprecated fallback
    public int getId() {
        IRegistry dimensionTypeRegistry = #getDimensionTypeRegistry();
    #if version >= 1.18
        java.util.Optional key_opt = dimensionTypeRegistry.getResourceKey((Object) instance);
    #else
        java.util.Optional key_opt = dimensionTypeRegistry.c((Object) instance);
    #endif
        if (key_opt.isPresent()) {
            ResourceKey res_key = (ResourceKey) key_opt.get();
            if (res_key == DimensionManager.OVERWORLD_LOCATION) {
                return 0;
            } else if (res_key == DimensionManager.NETHER_LOCATION) {
                return -1;
            } else if (res_key == DimensionManager.END_LOCATION) {
                return 1;
            }
        }
        return 0;
    }

    public static (DimensionManagerHandle) DimensionManager fromId(int id) {
        ResourceKey res_key;
        if (id == 0) {
            res_key = DimensionManager.OVERWORLD_LOCATION;
        } else if (id == -1) {
            res_key = DimensionManager.NETHER_LOCATION;
        } else if (id == 1) {
            res_key = DimensionManager.END_LOCATION;
        } else {
            throw new IllegalArgumentException("Invalid dimension id " + id);
        }
        IRegistry dimensionTypeRegistry = #getDimensionTypeRegistry();
    #if version >= 1.18
        return (DimensionManager) dimensionTypeRegistry.get(res_key);
    #else
        return (DimensionManager) dimensionTypeRegistry.a(res_key);
    #endif
    }
  #else
    // deprecated fallback
    public int getId() {
        IRegistry dimensionTypeRegistry = #getDimensionTypeRegistry();
        java.util.Optional key_opt = dimensionTypeRegistry.c((Object) instance);
        if (key_opt.isPresent()) {
            ResourceKey res_key = (ResourceKey) key_opt.get();
            if (res_key == DimensionManager.OVERWORLD) {
                return 0;
            } else if (res_key == DimensionManager.THE_NETHER) {
                return -1;
            } else if (res_key == DimensionManager.THE_END) {
                return 1;
            }
        }
        return 0;
    }

    public static (DimensionManagerHandle) DimensionManager fromId(int id) {
        ResourceKey res_key;
        if (id == 0) {
            res_key = DimensionManager.OVERWORLD;
        } else if (id == -1) {
            res_key = DimensionManager.THE_NETHER;
        } else if (id == 1) {
            res_key = DimensionManager.THE_END;
        } else {
            throw new IllegalArgumentException("Invalid dimension id " + id);
        }
        IRegistry dimensionTypeRegistry = #getDimensionTypeRegistry();
        return (DimensionManager) dimensionTypeRegistry.a(res_key);
    }
  #endif
#else
    public (com.bergerkiller.bukkit.common.resources.ResourceKey<com.bergerkiller.bukkit.common.resources.DimensionType>) ResourceKey getKey() {
        ResourceKey category = (ResourceKey) com.bergerkiller.bukkit.common.resources.ResourceCategory.dimension_type.getCategoryKey().getRaw();
        MinecraftKey name;

  #if version >= 1.13.1
        name = IRegistry.DIMENSION_TYPE.getKey((Object) instance);
        if (name == null) {
            throw new IllegalArgumentException("This dimension is not registered");
        }
  #else
        // Is an enum here, with always only 3 possible values anyway
        if (instance == DimensionManager.NETHER) {
            name = new MinecraftKey("the_nether");
        } else if (instance == DimensionManager.THE_END) {
            name = new MinecraftKey("the_end");
        } else {
            name = new MinecraftKey("overworld");
        }
  #endif

        return ResourceKey.create(category, name);
    }

    public static (DimensionManagerHandle) DimensionManager fromKey((com.bergerkiller.bukkit.common.resources.ResourceKey<com.bergerkiller.bukkit.common.resources.DimensionType>) ResourceKey key) {
        MinecraftKey mc_key = (MinecraftKey) key.name;

  #if version >= 1.13.1
        return (DimensionManager) IRegistry.DIMENSION_TYPE.get(mc_key);
  #else
        // Is an enum here, with always only 3 possible values anyway
        String name;
    #if version >= 1.12
        name = mc_key.getKey();
    #else
        name = mc_key.a();
    #endif
        if (name.equals("overworld")) {
            return DimensionManager.OVERWORLD;
        } else if (name.equals("the_nether")) {
            return DimensionManager.NETHER;
        } else if (name.equals("the_end")) {
            return DimensionManager.THE_END;
        } else {
            return null;
        }
  #endif
    }

    // mapped to id on 1.15.2 and before
    public int getId:getDimensionID();
    public static (DimensionManagerHandle) DimensionManager fromId:a(int id);
#endif
}
