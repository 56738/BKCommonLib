package net.minecraft.server;

import com.bergerkiller.generated.net.minecraft.server.ResourceKeyHandle;
import com.bergerkiller.generated.net.minecraft.server.MinecraftKeyHandle;
import com.bergerkiller.generated.net.minecraft.server.DimensionManagerHandle;

// Only available >= MC 1.9
optional class RegistryBlockID {
    public int getId(T value);
}

class RegistryID {
#if version >= 1.9
    public int getId(K value);
#else
    public int getId:b(T value);
#endif
}

class RegistryMaterials {
#if version >= 1.13
    protected optional final Map<V, K> opt_inverseLookupField:###;
#else
    protected optional final Map<V, K> opt_inverseLookupField:b;
#endif

#if version >= 1.13.1
    public V get((Object) MinecraftKey key);
    public (Object) MinecraftKey getKey:getKey(V value);
#elseif version >= 1.9
    public V get((Object) K key);
    public (Object) K getKey:b(V value);
#else
    public V get((Object) K key);
    public (Object) K getKey:c(V value);
#endif
}

class DimensionManager {
#if version >= 1.14
    public boolean hasSkyLight();
#else
    // Fallback for versions before DimensionManager had this property
    // On these versions it is inside WorldProvider, but that one is annoying to use
    public boolean hasSkyLight() {
        return instance.getDimensionID() == 0;
    }
#endif

#if version >= 1.16
    public (com.bergerkiller.bukkit.common.resources.ResourceKey<com.bergerkiller.bukkit.common.wrappers.Dimension>) ResourceKey getKey() {
        MinecraftServer server = MinecraftServer.getServer();
        IRegistryCustom$Dimension registry = server.f;
        java.util.Optional key_opt = registry.a().c(instance);
        if (key_opt.isPresent()) {
            return (ResourceKey) key_opt.get();
        } else {
            throw new IllegalArgumentException("This dimension is not registered");
        }
    }

    // deprecated fallback
    public int getId() {
        java.util.Optional key_opt = IRegistryCustom$Dimension.a().c(instance);
        if (key_opt.isPresent()) {
            ResourceKey res_key = (ResourceKey) key_opt.get();
            if (res_key == DimensionManager.OVERWORLD) {
                return 0;
            } else if (res_key == DimensionManager.THE_NETHER) {
                return -1;
            } else if (res_key == DimensionManager.THE_END) {
                return 1;
            }
        }
        return 0;
    }

    public static (DimensionManagerHandle) DimensionManager fromId(int id) {
        ResourceKey res_key;
        if (id == 0) {
            res_key = DimensionManager.OVERWORLD;
        } else if (id == -1) {
            res_key = DimensionManager.THE_NETHER;
        } else if (id == 1) {
            res_key = DimensionManager.THE_END;
        } else {
            throw new IllegalArgumentException("Invalid dimension id " + id);
        }
        MinecraftServer server = MinecraftServer.getServer();
        IRegistryCustom$Dimension registry = server.f;
        return (DimensionManager) registry.a().a(res_key);
    }
#else
    public (com.bergerkiller.bukkit.common.resources.ResourceKey<com.bergerkiller.bukkit.common.wrappers.Dimension>) ResourceKey getKey() {
        ResourceKey category = (ResourceKey) com.bergerkiller.bukkit.common.resources.ResourceCategory.dimension_type.getCategoryKey().getRaw();
        MinecraftKey name;

  #if version >= 1.13.1
        name = IRegistry.DIMENSION_TYPE.getKey(instance);
        if (name == null) {
            throw new IllegalArgumentException("This dimension is not registered");
        }
  #else
        // Is an enum here, with always only 3 possible values anyway
        int id = instance.getDimensionID();
        MinecraftKey name;
        if (id == -1) {
            name = new MinecraftKey("the_nether");
        } else if (id == 1) {
            name = new MinecraftKey("the_end");
        } else {
            name = new MinecraftKey("overworld");
        }
  #endif

        return ResourceKey.create(category, name);
    }

    // mapped to id on 1.15.2 and before
    public int getId:getDimensionID();
    public static (DimensionManagerHandle) DimensionManager fromId:a(int id);
#endif
}

// Since MC 1.14 has static fields
optional class IRegistry {

#if version >= 1.14
    public static int getWindowIdFromName(String name) {
        if (name == null) return -1;
        Object item = IRegistry.MENU.get(new MinecraftKey(name));
        return (item == null) ? -1 : IRegistry.MENU.a(item);
    }
#else
    public static int getWindowIdFromName(String name) {
        return -1;
    }
#endif

}

class ResourceKey {
#if version >= 1.16
    public (MinecraftKeyHandle) MinecraftKey getCategory() {
        #require net.minecraft.server.ResourceKey private final MinecraftKey category:b;
        return instance#category;
    }

    public (MinecraftKeyHandle) MinecraftKey getName:a();

    public static (ResourceKeyHandle) ResourceKey create:a((ResourceKeyHandle) ResourceKey category, (MinecraftKeyHandle) MinecraftKey name);
    public static (ResourceKeyHandle) ResourceKey createCategory:a((MinecraftKeyHandle) MinecraftKey categoryName);
#else
    public (MinecraftKeyHandle) MinecraftKey getCategory() {
        return (MinecraftKey) instance.category;
    }

    public (MinecraftKeyHandle) MinecraftKey getName() {
        return (MinecraftKey) instance.name;
    }

    public static (ResourceKeyHandle) ResourceKey create((ResourceKeyHandle) ResourceKey category, (MinecraftKeyHandle) MinecraftKey name) {
        return ResourceKey.create(category, name);
    }

    public static (ResourceKeyHandle) ResourceKey createCategory((MinecraftKeyHandle) MinecraftKey categoryName) {
        return ResourceKey.createCategory(categoryName);
    }
#endif
}