package net.minecraft.server;

/* import com.bergerkiller.generated.net.minecraft.server.EntityHandle; */

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.bases.IntVector3;

import com.bergerkiller.generated.net.minecraft.server.ChunkHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.ChunkSectionHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumSkyBlockHandle;
import com.bergerkiller.generated.net.minecraft.server.DataPaletteBlockHandle;
import com.bergerkiller.generated.net.minecraft.server.NibbleArrayHandle;
import com.bergerkiller.generated.net.minecraft.server.EntitySliceHandle;

class Chunk {
    private final (ChunkSectionHandle[]) ChunkSection[] sections;
    public final (WorldHandle) World world;

#if version >= 1.14
    public int getLocX() {
        return instance.getPos().x;
    }

    public int getLocZ() {
        return instance.getPos().z;
    }
#else
    public int getLocX() {
        return instance.locX;
    }

    public int getLocZ() {
        return instance.locZ;
    }
#endif

    public final (Map<IntVector3, org.bukkit.block.BlockState>) Map<BlockPosition, TileEntity> tileEntities;
#if spigot
    public final (List<Object>[]) List<Entity>[] entitySlices;
#else
    public final (List<Object>[]) EntitySlice<Entity>[] entitySlices;
#endif
    public org.bukkit.Chunk bukkitChunk;

#if version >= 1.13
    public (BlockData) IBlockData getBlockData:getType((IntVector3) BlockPosition blockposition);
#else
    public (BlockData) IBlockData getBlockData((IntVector3) BlockPosition blockposition);
#endif

#if version >= 1.14
    public (BlockData) IBlockData getBlockDataAtCoord(int x, int y, int z) {
        BlockPosition$PooledBlockPosition blockPos = BlockPosition$PooledBlockPosition.f(x, y, z);
        try {
            return instance.getType(blockPos);
        } finally {
            blockPos.close();
        }
    }
#elseif version >= 1.13
    public (BlockData) IBlockData getBlockDataAtCoord:getBlockData(int x, int y, int z);
#elseif version >= 1.9
    public (BlockData) IBlockData getBlockDataAtCoord:a(int x, int y, int z);
#else
    // Fallback on 1.8.8: generated code
    public (BlockData) IBlockData getBlockDataAtCoord(int x, int y, int z) {
        return instance.getBlockData(new BlockPosition(x, y, z));
    }
#endif

    // Since MC 1.13 updateFlags are used (See World.java setTypeAndData)
    public (BlockData) IBlockData setBlockData((IntVector3) BlockPosition blockposition, (BlockData) IBlockData iblockdata, int updateFlags) {
#if version >= 1.13.2
        return instance.setType(blockposition, iblockdata, (updateFlags & 64) != 0);
#elseif version >= 1.13
        return instance.a(blockposition, iblockdata, (updateFlags & 64) != 0);
#else
        return instance.a(blockposition, iblockdata);
#endif
    }

    public void addEntity:a((EntityHandle) Entity entity);

#if version >= 1.14
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getLightHeightMap(boolean initialize) {
        // Note: must always initialize, since the server does not store this data
        HeightMap heightMap = new HeightMap(instance, HeightMap$Type.values()[0]);
        com.bergerkiller.generated.net.minecraft.server.HeightMapHandle.T.initialize.invoke(heightMap);
        return heightMap;
    }
#elseif version >= 1.13
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getLightHeightMap(boolean initialize) {
        HeightMap heightMap = instance.b(HeightMap$Type.LIGHT_BLOCKING);
        if (initialize) {
            heightMap.a();
        }
        return heightMap;
    }
#else
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getLightHeightMap(boolean initialize) {
        HeightMap heightMap = new com.bergerkiller.bukkit.common.internal.proxy.HeightMapProxy_1_12_2(instance, instance.heightMap);
        if (initialize) {
             com.bergerkiller.generated.net.minecraft.server.HeightMapHandle.T.initialize.invoke(heightMap);
        }
        return heightMap;
    }
#endif

#if version >= 1.14
    public int getBrightness((EnumSkyBlockHandle) EnumSkyBlock enumskyblock, (IntVector3) BlockPosition position) {
        return instance.world.getBrightness(enumskyblock, position);
    }
#else
    public int getBrightness((EnumSkyBlockHandle) EnumSkyBlock enumskyblock, (IntVector3) BlockPosition position);
#endif

#if version >= 1.13
    public int getTopSliceY:b();
#else
    public int getTopSliceY:g();
#endif

    // MC 1.13: byte[] -> BiomeBase[]
    // public byte[] getBiomeIndex();

    public void addEntities();

#if version >= 1.14
    public boolean checkCanSave:c(boolean isNotAutosave) {
        return instance.isNeedsSaving();
    }
#elseif version >= 1.13
    public boolean checkCanSave:c(boolean isNotAutosave);
#else
    public boolean checkCanSave:a(boolean isNotAutosave);
#endif

#if version >= 1.12
    public void markDirty();
#else
    public void markDirty:e();
#endif

    <code>
    public static ChunkHandle fromBukkit(org.bukkit.Chunk chunk) {
        if (chunk != null) {
            return createHandle(com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toChunkHandle(chunk));
        } else {
            return null;
        }
    }
    </code>
}

class ChunkSection {
#if version >= 1.14
    public boolean isEmpty:c();
#else
    public boolean isEmpty:a();
#endif

    public int getYPosition();

    public static (ChunkSectionHandle) ChunkSection createNew((org.bukkit.World) World world, int y) {
#if version >= 1.14
        return new ChunkSection(y);
#else
        Boolean hasSkyLight = com.bergerkiller.generated.net.minecraft.server.WorldProviderHandle.T.hasSkyLight.invoke(world.worldProvider);
        return new ChunkSection(y, hasSkyLight.booleanValue());
#endif
    }

#if version >= 1.13
    public (DataPaletteBlockHandle) DataPaletteBlock<IBlockData> getBlockPalette:getBlocks();
#elseif version >= 1.9
    public (DataPaletteBlockHandle) DataPaletteBlock getBlockPalette:getBlocks();
#else
    // For MC 1.8.8 we do some conversion magic to expose the same API
    // DataPaletteBlock doesn't actually exist, it is emulated by BKCommonLib
    public (DataPaletteBlockHandle) char[] getBlockPalette:getIdArray();
#endif

    public (BlockData) IBlockData getBlockData:getType(int x, int y, int z);

#if version >= 1.14
    public (void) IBlockData setBlockData:setType(int x, int y, int z, (BlockData) IBlockData data);
#else
    public void setBlockData:setType(int x, int y, int z, (BlockData) IBlockData data);
#endif
}

// This is only used on CraftBukkit servers
// Spigot uses a simplified List<Entity>
optional class EntitySlice {
#if version >= 1.14
    private optional final List<T> listValues_1_8_3:c;
#elseif version >= 1.8.3
    private optional final List<T> listValues_1_8_3:e;
#else
    private optional final List<T> listValues_1_8_3:###;
#endif

    public (EntitySliceHandle) EntitySlice((Class<?>) Class<T> oclass);

    public boolean add(T value);

    public boolean remove(Object value);

    public Iterator iterator();

    public int size();
}

class DataPaletteBlock {
#if version >= 1.13
    public (BlockData) IBlockData getBlockData(int x, int y, int z) {
        return (IBlockData) instance.a(x, y, z);
    }
    public void setBlockData(int x, int y, int z, (BlockData) IBlockData data) {
        instance.setBlock(x, y, z, data);
    }
#elseif version >= 1.9
    public (BlockData) IBlockData getBlockData:a(int x, int y, int z);
    public void setBlockData:setBlock(int x, int y, int z, (BlockData) IBlockData data);
#else
    // Emulated on MC 1.8.8
    public (BlockData) BlockData getBlockData(int x, int y, int z);
    public void setBlockData(int x, int y, int z, (BlockData) BlockData data);
#endif
}

class EnumSkyBlock {
    enum (EnumSkyBlockHandle) EnumSkyBlock SKY;
    enum (EnumSkyBlockHandle) EnumSkyBlock BLOCK;

    public final int brightness:c;

    <code>
    public int ordinal() {
        return ((Enum<?>) getRaw()).ordinal();
    }
    </code>
}

class HeightMap {
    #bootstrap com.bergerkiller.bukkit.common.internal.CommonBootstrap.initServer();

#if version >= 1.14
    public (ChunkHandle) Chunk getChunk() {
        #require net.minecraft.server.HeightMap private final IChunkAccess chunk:e;
        return (Chunk) instance#chunk;
    }
#elseif version >= 1.13
    public (ChunkHandle) Chunk getChunk() {
        #require net.minecraft.server.HeightMap private final IChunkAccess chunk:c;
        return (Chunk) instance#chunk;
    }
#else
    public (ChunkHandle) net.minecraft.server.Chunk getChunk() {
        return (net.minecraft.server.Chunk) instance.chunk;
    }
#endif

#if version >= 1.13
    public int getHeight:a(int x, int z);
    private void setHeight:a(int x, int z, int height);
#else
    public int getHeight(int x, int z);
    public void setHeight(int x, int z, int height);
#endif

#if version == 1.13
    public void initialize:a();
#elseif version == 1.13.1
    public void initialize:a();
#elseif version == 1.13.2
    public void initialize:a();
#else
    // On versions before 1.12.2 and after 1.14, use our own implementation
    // The server offers no method on these versions to do so.
    public void initialize() {
        com.bergerkiller.generated.net.minecraft.server.HeightMapHandle handle;
        handle = com.bergerkiller.generated.net.minecraft.server.HeightMapHandle.createHandle(instance_raw);

        com.bergerkiller.generated.net.minecraft.server.ChunkHandle chunkHandle = handle.getChunk();
        org.bukkit.World world = chunkHandle.getBukkitChunk().getWorld();
        int baseX = chunkHandle.getLocX() << 4;
        int baseZ = chunkHandle.getLocZ() << 4;
        int highestY = chunkHandle.getTopSliceY() + 16;
        for (int x = 0; x < 16; ++x) {
            for (int z = 0; z < 16; ++z) {
                int y = highestY;
                while (y > 0) {
                    com.bergerkiller.bukkit.common.wrappers.BlockData blockData = chunkHandle.getBlockDataAtCoord(x, y - 1, z);
                    if (blockData == com.bergerkiller.bukkit.common.wrappers.BlockData.AIR || blockData.getOpacity(world, baseX+x, y, baseZ+z) == 0) {
                        --y;
                        continue;
                    }
                    break;
                }
                handle.setHeight(x, z, y);
            }
        }
    }
#endif
}